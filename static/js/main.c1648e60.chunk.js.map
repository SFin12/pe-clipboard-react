{"version":3,"sources":["Redux/actionTypes.js","Redux/actions.js","Lib/FirebaseConfig.js","Pages/SignInPage/SignInPage.js","Lib/GoogleLogin.js","components/ConfirmModal.js","Pages/ClassesPage/ClassesPage.js","components/DropDown/DropDown.js","Pages/GradebookPage/GradebookPage.js","Lib/saveRoster.js","Pages/ClassesPage/RosterPage/RosterPage.js","components/ListStudents.js","components/SuccessModal.js","Pages/ClassesPage/StudentsPage/StudentsPage.js","Pages/InfoPage/InfoPage.js","Pages/SettingsPage/SettingsPage.js","components/DesktopStudentInfo.js","components/DropDown/DropDownStudentInfo.js","components/ListStudentInfo.js","utils/utilities.js","components/DatePicker.js","components/ToggleSwitch.js","components/FilterDays.js","Pages/ClassesPage/StudentInfoPage/StudentInfoPage.js","components/NavMenu/NavMenu.js","App.js","components/withRouter.js","Lib/LinkReduxToDb.js","Redux/createStore.js","Redux/reducers.js","index.js"],"names":["UPDATE_LOGIN","UPDATE_USER_INFO","UPDATE_GOOGLEAUTH","UPDATE_PAGE","UPDATE_STORE","CREATE_CLASS","UPDATE_CLASSES","DELETE_CLASS","CREATE_GRADEBOOK","UPDATE_GRADEBOOKLIST","DELETE_GRADEBOOK","UPDATE_SETTINGS","UPDATE_STUDENTLIST","DELETE_STUDENT","DELETE_ROSTER","UPDATE_STUDENT_INFO","updateLogin","signedIn","type","ActionTypes","payload","updatePage","currentPage","updateStudentList","arrayStudentNames","sortedStudentNamesArr","map","n","toUpperCase","slice","replace","sort","console","log","deleteStudent","student","app","initializeApp","apiKey","process","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","databaseURL","db","getDatabase","mapDispatchToProps","updateUserInfo","id","name","email","userImg","updateGoogleAuth","googleAuth","gapi","updateStore","data","connect","state","isLoggedIn","imageUrl","props","onSuccess","googleUser","profile","getBasicProfile","getId","getName","getEmail","getImageUrl","userId","userRef","ref","onValue","snapshot","val","getUserData","onFailure","renderSigninButton","_gapi","signin2","render","scope","width","height","longtitle","theme","onsuccess","onfailure","useEffect","window","onGoogleScriptLoad","load","a","auth2","init","client_id","_googleAuth","firstJs","document","getElementsByTagName","getElementById","onload","js","createElement","src","parentNode","insertBefore","className","to","alt","Confirm","item","showModal","handleModal","warningMessageString","Modal","show","centered","size","Header","closeButton","Title","Body","Footer","Button","variant","onClick","createClass","updateClassList","deleteClass","gradebook","classList","useState","toggleDelete","setToggleDelete","buttonClass","setButtonClass","newClass","setNewClass","setShowModal","itemToDelete","setItemToDelete","showAddClassModal","setShowAddClassModal","navigate","useNavigate","gb","ListClasses","length","Fragment","c","i","handleDelete","handleClassClick","inputClassModal","onHide","htmlFor","value","placeholder","onChange","e","target","onKeyDown","handleSave","key","some","existingClass","classId","icon","faPlusCircle","faMinusCircle","DropDownHover","toggle","bind","showHelp","this","setState","color","onMouseEnter","onMouseLeave","style","marginBottom","buttonTitle","faCaretDown","isOpen","Card","inverse","CardBody","content","Component","DropDownClick","createGradebook","gradebookName","updateGradebookList","deleteGradebook","gradebookList","input","setInput","choice","setChoice","showConfirmModal","setShowConfirmModal","selectRef","useRef","handleChange","handleClick","ListGradebooks","selectClass","select","cleanText","string","cleanString","isNaN","Number","toLowerCase","includes","deleteRoster","class","studentList","roster","setRoster","callback","files","csvInput","reader","FileReader","formattedArr","arr","result","split","cleanedStudent","readAsText","alert","saveRoster","response","setTimeout","ListStudents","AddStudents","accept","hidden","hideHeader","faArrowLeft","studentsList","dailyPoints","settings","studentPoints","setStudentPoints","attendance","setAttendance","note","setNote","studentToDelete","setStudentToDelete","uncleanCurrentGb","uncleanCurrentClass","classKey","handleDecrement","studentId","currentPoints","prevState","handleIncrement","handleAttendance","buttonName","currentTarget","studentIdNumber","currentAttendance","handlePoints","handleNote","noteId","noteName","buttonElements","Array","from","parentElement","children","buttonsClicked","forEach","button","push","absentPoints","tardyPoints","buttonClickedBool","getAttribute","pointValues","reduce","total","current","pointsChanged","totalStudents","newState","undefined","note1","note2","note3","note4","studentButtons","textAlign","defaultValue","SuccessModal","showSuccess","title","messageString","dialogClassName","bsPrefix","updateStudentInfo","studentInfoObj","date","newStudent","setNewStudent","setShowSuccess","addStudentModal","toggleModal","onSubmit","Date","toLocaleDateString","students","elements","preventDefault","studentName","studentNotes","studentAttendance","finishedOneStudent","dataset","studentObj","points","notes","InfoPage","updateSettings","settingsObj","showSaved","setShowSaved","dPointsRef","absentPointsRef","tardyPointsRef","n1Ref","n2Ref","n3Ref","n1PointsRef","n2PointsRef","n3PointsRef","keyCode","note1Points","note2Points","note3Points","maxLength","min","max","DesktopStudentInfo","totalPoints","gradePercentage","absences","tardies","DropDownStudentInfo","DropdownButton","menuVariant","Dropdown","Item","studentInfo","innerWidth","screenWidth","setScreenWidth","handleWindowResize","addEventListener","removeEventListener","useViewport","pointsPossible","getFilteredEntries","studentArr","startIndex","endIndex","isArray","findIndex","startDate","endDate","getTotalPoints","pointsArray","filteredEntries","entry","b","getGradePercentage","Math","round","getNotes","n1Count","n2Count","n3Count","notesArray","notesSummary","getAbsences","aCount","getTardies","tCount","Object","keys","DatePicker","label","changeHandler","ToggleSwitch","checked","handleToggle","FilterDays","today","toISOString","defaultStartDate","setDate","getDate","setEndDate","setStartDate","filter","setFilter","handleDateChange","handleDate","minHeight","checkFilter","infoExists","setInfoExists","startDateFilter","setStartDateFilter","endDateFilter","setEndDateFilter","formattedStartDate","join","formattedEndDate","startDateToFind","endDateToFind","links","text","NavMenu","logOut","signOut","location","reload","createNavItem","NavItem","rosterNav","classesLink","closeNavMenu","unshift","classes","shift","navOpen","pop","Navbar","light","expand","fixed","NavbarToggler","navbar","Nav","App","prevProps","userObject","update","writeUserData","path","element","React","withRouter","store","createStore","action","currentGb","currentClass","gbMatch","obj","updatedGradebooList","cMatch","currentCl","filteredArr","filteredObj","sMatch","thisClass","dateLastSubmitted","applyMiddleware","thunk","ReactDOM","StrictMode"],"mappings":"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","file":"static/js/main.c1648e60.chunk.js","sourcesContent":["//action types for redux\n\nexport const UPDATE_LOGIN = \"UPDATE_LOGIN\";\nexport const UPDATE_USER_INFO = \"UPDATE_USER_INFO\";\nexport const UPDATE_GOOGLEAUTH = \"UPDATE_GOOGLEAUTH\";\nexport const UPDATE_PAGE = \"UPDATE_PAGE\";\nexport const UPDATE_STORE = \"UPDATE_STORE\";\n\nexport const CREATE_CLASS = \"CREATE_CLASS\";\nexport const UPDATE_CLASSES = \"UPDATE_CLASSES\";\nexport const GET_CLASSES = \"GET_CLASSES\";\nexport const DELETE_CLASS = \"DELETE_CLASS\";\n\nexport const CREATE_GRADEBOOK = \"CREATE_GRADEBOOK\";\nexport const UPDATE_GRADEBOOKLIST = \"UPDATE_GRADEBOOKLIST\";\nexport const GET_GRADEBOOK = \"GET_GRADEBOOK\";\nexport const GET_GRADEBOOKLIST = \"GET_GRADEBOOKLIST\";\nexport const DELETE_GRADEBOOK = \"DELETE_GRADEBOOK\";\n\nexport const UPDATE_ROSTER = \"UPDATE_ROSTER\";\n\nexport const UPDATE_SETTINGS = \"UPDATE_SETTINGS\";\n\nexport const UPDATE_DATABASE = \"UPDATE_DATABASE\";\n\nexport const UPDATE_STUDENTLIST = \"UPDATE_STUDENTLIST\";\nexport const DELETE_STUDENT = \"DELETE_STUDENT\";\nexport const DELETE_ROSTER = \"DELETE_ROSTER\";\n\nexport const UPDATE_STUDENT_INFO = \"UPDATE_STUDENT_INFO\";\n\n//Not supported yet-----------------------------------------\nexport const UPDATE_WEEKLY_POINTS = \"UPDATE_WEEKLY_POINTS\";\nexport const UPDATE_TOTAL_POINTS = \"UPDATE_TOTAL_POINTS\";\nexport const UPDATE_POINTS_POSSIBLE = \"UPDATE_POINTS_POSSIBLE\";\nexport const UPDATE_GRADE_PERCENTAGE = \"UPDATE_GRADE_PERCENTAGE\";\n\n//Not supported yet-----------------------------------------\nexport const UPDATE_ATTENDANCE = \"UPDATE_ATTENDANCE\";\n","import * as ActionTypes from \"./actionTypes\";\n\nexport const updateLogin = (signedIn = false) => ({\n    type: ActionTypes.UPDATE_LOGIN,\n    payload: {\n        signedIn,\n    },\n});\n\nexport const updateUserInfo = (id, name, email, userImg) => ({\n    type: ActionTypes.UPDATE_USER_INFO,\n    payload: {\n        id,\n        name,\n        email,\n        userImg,\n    },\n});\n\nexport const updateGoogleAuth = (googleAuth, gapi) => ({\n    type: ActionTypes.UPDATE_GOOGLEAUTH,\n    payload: {\n        googleAuth,\n        gapi,\n    },\n});\n\nexport const updatePage = (currentPage = \"Classes\") => {\n    return {\n        type: ActionTypes.UPDATE_PAGE,\n        payload: {\n            currentPage: currentPage,\n        },\n    };\n};\n\nexport const createGradebook = (gradebookName) => {\n    return {\n        type: ActionTypes.CREATE_GRADEBOOK,\n        payload: gradebookName,\n    };\n};\n\nexport const updateGradebookList = (gradebookName) => {\n    return {\n        type: ActionTypes.UPDATE_GRADEBOOKLIST,\n        payload: gradebookName,\n    };\n};\n\nexport const updateStore = (data) => {\n    return {\n        type: ActionTypes.UPDATE_STORE,\n        payload: data,\n    };\n};\n\nexport const getGradebookList = () => ({\n    type: ActionTypes.GET_GRADEBOOKLIST,\n    //async fetch to get list of gradebooks from google api\n});\n\nexport const deleteGradebook = (gradebookName) => ({\n    type: ActionTypes.DELETE_GRADEBOOK,\n    payload: gradebookName,\n});\n\nexport const createClass = (className) => {\n    return {\n        type: ActionTypes.CREATE_CLASS,\n        payload: className,\n    };\n};\n\nexport const updateClassList = (className) => {\n    return {\n        type: ActionTypes.UPDATE_CLASSES,\n        payload: className,\n    };\n};\n\nexport const deleteClass = (className) => ({\n    type: ActionTypes.DELETE_CLASS,\n    payload: className,\n});\n\nexport const updateStudentList = (arrayStudentNames) => {\n    //sorts student names by removing commas then replacing.\n    const sortedStudentNamesArr = arrayStudentNames\n        .map((n) => {\n            const capitalized = n[0].toUpperCase() + n.slice(1);\n            return capitalized.replace(\",\", \"\");\n        })\n        .sort()\n        .map((n) => n.replace(\" \", \", \"));\n    console.log(\"sorted names: \", sortedStudentNamesArr);\n    return {\n        type: ActionTypes.UPDATE_STUDENTLIST,\n        payload: sortedStudentNamesArr,\n    };\n};\nexport const deleteRoster = () => {\n    console.log(\"Deleting Student List\");\n    return {\n        type: ActionTypes.DELETE_ROSTER,\n        payload: [],\n    };\n};\n\nexport const deleteStudent = (student) => {\n    console.log(\"Deleting \", student);\n    return {\n        type: ActionTypes.DELETE_STUDENT,\n        payload: student,\n    };\n};\n\nexport const updateStudentInfo = (studentInfoObj, date) => {\n    return {\n        type: ActionTypes.UPDATE_STUDENT_INFO,\n        date: date,\n        payload: studentInfoObj,\n    };\n};\n\nexport const updateAttendance = (attendanceObj) => {\n    return {\n        type: ActionTypes.UPDATE_ATTENDANCE,\n        payload: attendanceObj,\n    };\n};\n\nexport const updateSettings = (settingsObj) => {\n    console.log(\"updatingSettings\", settingsObj);\n    return {\n        type: ActionTypes.UPDATE_SETTINGS,\n        payload: settingsObj,\n    };\n};\n","// Import the functions you need from the SDKs you need\nimport { initializeApp } from \"@firebase/app\";\nimport { getDatabase } from \"@firebase/database\";\n\nconst firebaseConfig = {\n    apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\n    authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,\n    projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\n    storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,\n    messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID,\n    appId: process.env.REACT_APP_FIREBASE_APP_ID,\n    measurementId: process.env.REACT_APP_FIREBASE_MEASUREMENT_ID,\n    databaseURL: process.env.REACT_APP_FIREBASE_DATABASE_URL,\n};\n\n// Initialize Firebase\nconst app = initializeApp(firebaseConfig);\nexport const db = getDatabase(app);\n","import { connect } from \"react-redux\";\nimport React, { useEffect } from \"react\";\nimport { loadGoogleScript } from \"../../Lib/GoogleLogin\";\nimport {\n    updateLogin,\n    updateUserInfo,\n    updateGoogleAuth,\n    updateStore,\n} from \"../../Redux/actions\";\nimport { db } from \"../../Lib/FirebaseConfig\";\nimport { ref, onValue } from \"firebase/database\";\n\nconst googleClientId = process.env.REACT_APP_GOOGLE_CLIENT_ID;\n\nconst mapStateToProps = (state) => {\n    return {\n        isLoggedIn: state.signedIn,\n        id: state.id,\n        name: state.name,\n        email: state.email,\n        imageUrl: state.userImg,\n        googleAuth: state.googleAuth,\n    };\n};\n\nconst mapDispatchToProps = {\n    updateLogin,\n    updateUserInfo,\n    updateGoogleAuth,\n    updateStore,\n};\n\n//Part of this page came from the following tutorial...\n//https://www.quod.ai/post/how-to-integrate-google-api-into-your-react-app\n\nfunction SignInPage(props) {\n    //destructuring props\n    const {\n        isLoggedIn,\n        name,\n        email,\n        imageUrl,\n        updateLogin,\n        updateUserInfo,\n        updateGoogleAuth,\n        updateStore,\n    } = props;\n    //fetch current user data to update redux store when first loading\n    function getUserData(userId) {\n        if (!userId) {\n            return console.log(\"No user Id\");\n        }\n        const userRef = ref(db, \"/users/\" + userId);\n        onValue(userRef, (snapshot) => {\n            const data = snapshot.val();\n\n            //check if user has any saved data\n            if (data) {\n                //updates redux store with user data stored in realtime database from firebase\n                updateStore(data);\n            }\n            // else {\n            //     writeUserData()\n            // }\n            return updateLogin(true);\n        });\n    }\n\n    const onSuccess = (googleUser) => {\n        // (Ref. 7)\n\n        const profile = googleUser.getBasicProfile();\n        const id = profile.getId();\n        const name = profile.getName();\n        const email = profile.getEmail();\n        const imageUrl = profile.getImageUrl();\n        updateUserInfo(id, name, email, imageUrl);\n        getUserData(id);\n    };\n\n    const onFailure = () => {\n        updateLogin(false);\n    };\n\n    const renderSigninButton = (_gapi) => {\n        // (Ref. 6)\n        _gapi.signin2.render(\"google-signin\", {\n            scope: \"profile email\",\n            width: 240,\n            height: 50,\n            longtitle: true,\n            theme: \"dark\",\n            onsuccess: onSuccess,\n            onfailure: onFailure,\n        });\n    };\n\n    useEffect(() => {\n        // Window.gapi is available at this point\n        window.onGoogleScriptLoad = () => {\n            // (Ref. 1)\n\n            const _gapi = window.gapi; // (Ref. 2)\n\n            _gapi.load(\"auth2\", () => {\n                // (Ref. 3)\n                (async () => {\n                    const _googleAuth = await _gapi.auth2.init({\n                        // (Ref. 4)\n                        client_id: googleClientId,\n                    });\n\n                    updateGoogleAuth(_googleAuth, _gapi); //updates redux store for global access\n                    renderSigninButton(_gapi); // (Ref. 6)\n                })();\n            });\n        };\n\n        // Ensure everything is set before loading the script\n        loadGoogleScript(); // (Ref. 9)\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    return (\n        <div>\n            <div className=\"clipboard\">\n                <div className=\"clipboard top\"></div>\n                <div className=\"flex-fill\">\n                    <div id=\"main-title\">\n                        <h2>Coach's Clipboard</h2>\n                    </div>\n                    {!isLoggedIn && (\n                        <div to=\"/classes\" key=\"signInKey\" id=\"google-signin\" />\n                    )}\n\n                    {isLoggedIn && (\n                        <div className=\"d-flex flex-column align-items-center mb-3\">\n                            <div>\n                                <img\n                                    className=\"rounded-circle\"\n                                    alt=\"profile\"\n                                    src={imageUrl}\n                                />\n                            </div>\n                            <div>{name}</div>\n                            <div>{email}</div>\n\n                            {/* <button className=\"btn-primary\" onClick={logOut}>\n                                Log Out\n                            </button> */}\n                        </div>\n                    )}\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SignInPage);\n","export const loadGoogleScript = () => {\n  \n    //loads the Google JavaScript Library\n    (function () {\n        const id = 'google-js';\n        const src = 'https://apis.google.com/js/platform.js';\n        \n        //we have at least one script (React)\n        const firstJs = document.getElementsByTagName('script')[0];\n        \n        //prevent script from loading twice\n        if (document.getElementById(id)) { \n            const js = document.getElementById(id);\n            js.onload = window.onGoogleScriptLoad;\n            return; }\n        const js = document.createElement('script'); \n        js.id = id;\n        js.src = src;\n        js.onload = window.onGoogleScriptLoad; \n        firstJs.parentNode.insertBefore(js, firstJs);\n    }());    \n    \n}","import React from \"react\";\nimport { Modal, Button } from \"react-bootstrap\";\n\nfunction Confirm({ item, showModal, handleModal, warningMessageString }) {\n    return (\n        <>\n            <Modal show={showModal} centered size=\"lg\">\n                <Modal.Header closeButton className=\"bg-warning\">\n                    <Modal.Title className=\"text-black\">\n                        Delete {item}?\n                    </Modal.Title>\n                </Modal.Header>\n                <Modal.Body className=\"text-dark\">\n                    {warningMessageString}\n                </Modal.Body>\n                <Modal.Footer>\n                    <Button\n                        variant=\"secondary\"\n                        name=\"cancel\"\n                        onClick={handleModal}\n                    >\n                        Cancel\n                    </Button>\n                    <Button\n                        variant=\"danger\"\n                        name=\"delete\"\n                        onClick={handleModal}\n                    >\n                        Delete\n                    </Button>\n                </Modal.Footer>\n            </Modal>\n        </>\n    );\n}\n\nexport default Confirm;\n","import React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport {\n    createClass,\n    updateClassList,\n    deleteClass,\n    updatePage,\n} from \"../../Redux/actions\";\nimport { Modal, Button } from \"react-bootstrap\";\nimport { useNavigate } from \"react-router\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPlusCircle, faMinusCircle } from \"@fortawesome/free-solid-svg-icons\";\nimport \"./ClassesPage.scss\";\nimport Confirm from \"../../components/ConfirmModal\";\n\nconst mapStateToProps = (state) => {\n    return {\n        gradebook: state.gradebook,\n        classList: state.classList,\n        currentPage: state.currentPage,\n    };\n};\n\nconst mapDispatchToProps = {\n    createClass,\n    updateClassList,\n    deleteClass,\n    updatePage,\n};\n\nfunction ClassesPage(props) {\n    const [toggleDelete, setToggleDelete] = useState(false);\n    const [buttonClass, setButtonClass] = useState(\"class-button\");\n    const [newClass, setNewClass] = useState(\"\");\n    const [showModal, setShowModal] = useState(false);\n    const [itemToDelete, setItemToDelete] = useState(\"\");\n    const [showAddClassModal, setShowAddClassModal] = useState(false);\n    const navigate = useNavigate();\n    const uncleanGb = props.gradebook;\n    const gb = uncleanGb.replace(/[.,/#!$%^&*;:{}=\\-_`~()]/g, \" \");\n\n    useEffect(() => {\n        if (toggleDelete) {\n            //highlights classes in red to show they can be deleted.\n            setButtonClass(\"delete-class-button\");\n\n            //removes red highlight, clickon on them will not delete but rather take you to student page.\n        } else {\n            setButtonClass(\"class-button\");\n        }\n    }, [toggleDelete]);\n\n    function ListClasses() {\n        if (props.classList[gb] && props.classList[gb].length > 0) {\n            return (\n                <React.Fragment>\n                    <div className=\"d-flex flex-column align-items-center\">\n                        {props.classList[gb].map((c, i) => (\n                            <button\n                                key={c + i}\n                                className={buttonClass}\n                                onClick={\n                                    toggleDelete\n                                        ? handleDelete\n                                        : handleClassClick\n                                }\n                                id={c}\n                            >\n                                {c}\n                            </button>\n                        ))}\n                    </div>\n                </React.Fragment>\n            );\n        } else {\n            return null;\n        }\n    }\n\n    const inputClassModal = (\n        <Modal\n            show={showAddClassModal}\n            centered\n            size=\"sm\"\n            className=\"p-4 p-sm-2 p-md-2y\"\n            onHide={() => setShowAddClassModal(false)}\n        >\n            <Modal.Header closeButton className=\"light-header font-weight-bold\">\n                <Modal.Title className=\"font-weight-bold text-dark\">\n                    Add Classes\n                </Modal.Title>\n            </Modal.Header>\n            <Modal.Body className=\"text-dark\">\n                <label htmlFor=\"create-class text-align-center\">\n                    Add Class\n                </label>\n                <div className=\"input-group mb-3 d-flex justify-content-start\">\n                    <input\n                        id=\"create-class\"\n                        type=\"text\"\n                        value={newClass}\n                        placeholder=\"Class Name\"\n                        className=\"text-input\"\n                        onChange={handleChange}\n                        onKeyDown={handleSave}\n                    />\n                </div>\n                <p>Press Enter or click add</p>\n            </Modal.Body>\n            <Modal.Footer className=\"d-flex justify-content-between\">\n                <Button\n                    className=\"m-1 green-button text-dark\"\n                    name=\"cancel\"\n                    id=\"save-class\"\n                    onClick={handleSave}\n                >\n                    Add\n                </Button>\n                <Button\n                    className=\"ml-1 grey-button text-dark\"\n                    name=\"finished\"\n                    onClick={() => setShowAddClassModal(false)}\n                >\n                    Finished\n                </Button>\n            </Modal.Footer>\n        </Modal>\n    );\n\n    function handleSave(e) {\n        if (\n            (newClass && e.key === \"Enter\") ||\n            (newClass && e.target.id === \"save-class\")\n        ) {\n            if (\n                !props.classList[gb] ||\n                !props.classList[gb].some(\n                    (existingClass) => existingClass === newClass\n                )\n            ) {\n                props.createClass(newClass);\n                props.updateClassList(newClass);\n                setNewClass(\"\");\n            }\n        }\n    }\n\n    function handleChange(e) {\n        if (e.target.id === \"create-class\") {\n            setNewClass(e.target.value);\n        }\n    }\n\n    function handleClassClick(e) {\n        const classId = e.target.id;\n        if (buttonClass !== \"delete-class-button\") {\n            props.createClass(classId);\n\n            //redirects to studentsPage\n            navigate(\"/students\");\n        }\n    }\n\n    function handleDelete(e) {\n        if (toggleDelete) {\n            setShowModal(true);\n            setItemToDelete(e.target.id);\n        }\n    }\n\n    function handleModal(e) {\n        // close delete modal after cancel or delete.\n        setShowModal(false);\n        // if user confirms delete, delete selected class from redux and firebase.\n        e.target.name === \"delete\" && props.deleteClass(itemToDelete);\n    }\n\n    // Main return for ClassPage\n    return (\n        <React.Fragment>\n            {showModal && (\n                <Confirm\n                    item={itemToDelete}\n                    showModal={showModal}\n                    handleModal={handleModal}\n                    warningMessageString={\n                        \"You will also lose the student roster associated with the class\"\n                    }\n                />\n            )}\n            <h1 className=\"header\">Classes</h1>\n            <hr />\n\n            <div className=\"d-flex justify-content-center\">\n                <span>\n                    <h2 className=\"subtitle mb-4\">{props.gradebook}</h2>\n                </span>\n            </div>\n            <div className=\"form-container\">\n                {showAddClassModal ? <div>{inputClassModal}</div> : null}\n                <div className=\"add-delete-container\">\n                    <ListClasses />\n                    <div className=\"d-flex justify-content-around\">\n                        <div\n                            id=\"add-class-button\"\n                            onClick={() => {\n                                if (toggleDelete) {\n                                    setToggleDelete(false);\n                                }\n                                return setShowAddClassModal(true);\n                            }}\n                        >\n                            <FontAwesomeIcon\n                                name=\"add-icon\"\n                                icon={faPlusCircle}\n                                className=\"plus-icon mt-4\"\n                            />\n                        </div>\n\n                        <div\n                            onClick={() => setToggleDelete(!toggleDelete)}\n                            id=\"delete-a-class\"\n                        >\n                            <FontAwesomeIcon\n                                name=\"delete-icon\"\n                                icon={faMinusCircle}\n                                className={\n                                    toggleDelete\n                                        ? \"minus-icon mt-4 highlight\"\n                                        : \"minus-icon mt-4\"\n                                }\n                            />\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </React.Fragment>\n    );\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ClassesPage);\n","import { faCaretDown } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React, { Component } from \"react\";\nimport { Button, CardBody, Card } from \"reactstrap\";\nimport Collapse from \"reactstrap/lib/Collapse\";\n\nimport \"./DropDown.scss\";\n\nexport class DropDownHover extends Component {\n    constructor(props) {\n        super(props);\n        this.toggle = this.toggle.bind(this);\n        this.state = { showHelp: false };\n    }\n\n    toggle(e) {\n        if (e.type === \"mouseenter\") {\n            this.setState({ showHelp: true });\n        } else if (e.type === \"click\") {\n            this.setState({ showHelp: !this.state.showHelp });\n        } else {\n            this.setState({ showHelp: false });\n        }\n\n        e.type === \"mouseenter\" || e.type === \"click\"\n            ? this.setState({ showHelp: true })\n            : this.setState({ showHelp: false });\n    }\n\n    render() {\n        return (\n            <div>\n                <Button\n                    color=\"dark\"\n                    onMouseEnter={this.toggle}\n                    onMouseLeave={this.toggle}\n                    onClick={this.toggle}\n                    style={{ marginBottom: \"1rem\" }}\n                >\n                    {this.props.buttonTitle}{\" \"}\n                    <FontAwesomeIcon icon={faCaretDown} />\n                </Button>\n                <Collapse isOpen={this.state.showHelp}>\n                    <Card color=\"dark\" inverse>\n                        <CardBody>{this.props.content}</CardBody>\n                    </Card>\n                </Collapse>\n            </div>\n        );\n    }\n}\nexport class DropDownClick extends DropDownHover {\n    constructor(props) {\n        super(props);\n        this.toggle = this.toggle.bind(this);\n        this.state = { showHelp: false };\n    }\n\n    toggle(e) {\n        this.setState({ showHelp: !this.state.showHelp });\n        this.props.toggleDelete();\n    }\n\n    render() {\n        return (\n            <div>\n                <Button\n                    color=\"dark\"\n                    onClick={this.toggle}\n                    style={{ marginBottom: \"1rem\" }}\n                >\n                    {this.props.buttonTitle}{\" \"}\n                    <FontAwesomeIcon icon={faCaretDown} />\n                </Button>\n                <Collapse isOpen={this.state.showHelp}>\n                    <Card color=\"dark\" inverse>\n                        <CardBody>{this.props.content}</CardBody>\n                    </Card>\n                </Collapse>\n            </div>\n        );\n    }\n}\n","import React, { useEffect, useRef, useState } from \"react\";\n\nimport { connect } from \"react-redux\";\nimport {\n    createGradebook,\n    updateGradebookList,\n    updatePage,\n    deleteGradebook,\n} from \"../../Redux/actions\";\nimport {\n    DropDownClick,\n    DropDownHover,\n} from \"../../components/DropDown/DropDown\";\nimport \"./GradebookPage.scss\";\nimport Confirm from \"../../components/ConfirmModal\";\nimport { useNavigate } from \"react-router-dom\";\n\nconst mapStateToProps = (state) => {\n    return {\n        gradebook: state.gradebook,\n        gradebookList: state.gradebookList,\n        currentPage: state.currentPage,\n    };\n};\n\nconst mapDispatchToProps = {\n    createGradebook,\n    updateGradebookList,\n    updatePage,\n    deleteGradebook,\n};\n\nfunction GradebookPage(props) {\n    const [input, setInput] = useState(\"\");\n    const [choice, setChoice] = useState(\"\");\n    const [toggleDelete, setToggleDelete] = useState(false);\n    const [showConfirmModal, setShowConfirmModal] = useState(false);\n\n    const selectRef = useRef(choice);\n\n    const navigate = useNavigate();\n\n    useEffect(() => {\n        const select = document.getElementById(\"select-gradebook\");\n        if (select) {\n            setChoice(select.value);\n        }\n    }, [choice]);\n\n    function handleChange(e) {\n        // If gradebook is being created\n        if (e.target.id === \"create-gradebook\") {\n            setInput(e.target.value);\n            // If gradebook is being selected\n        } else {\n            setChoice(e.target.value);\n        }\n    }\n\n    function handleClick(e) {\n        // If gradebook was created and saved\n        if (e.target.id === \"save-gradebook\") {\n            props.createGradebook(input);\n            props.updateGradebookList(input);\n            navigate(\"/classes\");\n        } else {\n            /* If gradebook was selected and saved */\n            if (!toggleDelete) {\n                props.createGradebook(choice);\n                props.updateGradebookList(choice);\n                navigate(\"/classes\");\n            } else {\n                setShowConfirmModal(true);\n            }\n        }\n    }\n\n    function handleDelete() {\n        toggleDelete ? setToggleDelete(false) : setToggleDelete(true);\n        setChoice(\"\");\n    }\n\n    function handleModal(e) {\n        // close delete modal after cancel or delete.\n        setShowConfirmModal(false);\n        // if user confirms delete, delete selected class from redux and firebase.\n        e.target.name === \"delete\" && props.deleteGradebook(choice);\n        props.createGradebook(\"\");\n        setChoice(\"\");\n        console.log(\"post modal \", choice);\n    }\n\n    function ListGradebooks() {\n        if (props.gradebookList.length > 0) {\n            let selectClass = \"custom-select\";\n            toggleDelete\n                ? (selectClass = \"custom-select-delete\")\n                : (selectClass = \"custom-select\");\n            return (\n                <React.Fragment>\n                    <p>or</p>\n                    <label htmlFor=\"select-gradebook\">Change Gradebook</label>\n\n                    <div className=\"input-group mb-3 d-flex justify-content-center justify-content-md-start\">\n                        <select\n                            className={selectClass}\n                            id=\"select-gradebook\"\n                            onChange={handleChange}\n                            value={choice}\n                            ref={selectRef}\n                        >\n                            {props.gradebookList.map((gradebook, i) => {\n                                return (\n                                    <option\n                                        key={\"gb\" + i}\n                                        value={gradebook}\n                                        name={gradebook}\n                                    >\n                                        {gradebook}\n                                    </option>\n                                );\n                            })}\n                        </select>\n                        <div\n                            className=\"input-group-append\"\n                            onClick={handleClick}\n                            id=\"save-gradebook\"\n                        >\n                            <label\n                                className=\"input-group-text\"\n                                htmlFor=\"inputGroupSelect02\"\n                                id=\"save-gradebook-label\"\n                            >\n                                save\n                            </label>\n                        </div>\n                    </div>\n                </React.Fragment>\n            );\n        } else {\n            return null;\n        }\n    }\n\n    return (\n        <React.Fragment>\n            <h1 className=\"header\">Gradebook</h1>\n            <hr />\n            <div className=\"form-container\">\n                <section>\n                    <DropDownHover\n                        buttonTitle=\"First Gradebook?\"\n                        content='Before adding classes, create a gradebook name such as \"First Semester\" or \"Spring 22\". Start a new gradebook for each grading period. To customize daily points and notes change them in settings.'\n                    />\n                </section>\n                <br />\n\n                <label htmlFor=\"create-gradebook\">Create Gradebook</label>\n                <div className=\"input-group mb-3 d-flex justify-content-center justify-content-md-start\">\n                    <input\n                        id=\"create-gradebook\"\n                        type=\"text\"\n                        value={input}\n                        placeholder=\"Gradebook Name\"\n                        className=\"text-input\"\n                        onChange={handleChange}\n                    />\n                    <div className=\"input-group-append\">\n                        <label\n                            className=\"input-group-text\"\n                            htmlFor=\"create-gradebook\"\n                            id=\"save-gradebook\"\n                            onClick={handleClick}\n                        >\n                            save\n                        </label>\n                    </div>\n                </div>\n\n                <ListGradebooks />\n                <span>\n                    <div>\n                        Current Gradebook:\n                        <span>\n                            <h4 className=\"inline\"> {props.gradebook}</h4>\n                        </span>\n                    </div>\n                </span>\n                {props.gradebookList.length ? (\n                    <div className=\"mt-4\">\n                        <DropDownClick\n                            toggleDelete={handleDelete}\n                            buttonTitle=\"Delete gradebook?\"\n                            content=\"You will lose all classes and information associated with a deleted gradebook.  Make sure you no longer need the information.\"\n                        />\n                    </div>\n                ) : null}\n                <Confirm\n                    item={choice}\n                    showModal={showConfirmModal}\n                    handleModal={handleModal}\n                    warningMessageString={\n                        \"are you sure you want to delete \" + choice + \"?\"\n                    }\n                />\n            </div>\n        </React.Fragment>\n    );\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(GradebookPage);\n","export function saveRoster(e, callback) {\n    if (e.target.files[0]) {\n        const csvInput = e.target.files[0];\n        const reader = new FileReader();\n        let formattedArr = [];\n\n        reader.onload = function () {\n            const arr = reader.result.split(\"\\n\");\n\n            for (let student of arr) {\n                const cleanedStudent = cleanText(student);\n                if (cleanedStudent) {\n                    formattedArr = [...formattedArr, cleanedStudent];\n                }\n            }\n            return callback(formattedArr);\n        };\n\n        // start reading the file. When it is done, calls the onload event defined above.\n        reader.readAsText(csvInput);\n    } else {\n        alert(\n            \"Error when loading csv file.  Make sure there is at least one student and the file type ends with .csv\"\n        );\n    }\n}\n\nfunction cleanText(string) {\n    let cleanString = string;\n    const nums = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n    if (cleanString && !isNaN(Number(cleanString[0]))) {\n        cleanString = cleanString.slice(1);\n        return cleanText(cleanString);\n    }\n    if (\n        cleanString &&\n        cleanString[0].toUpperCase() === cleanString[0].toLowerCase() &&\n        isNaN(Number(cleanString[0]))\n    ) {\n        cleanString = cleanString.slice(1);\n        return cleanText(cleanString);\n    }\n    if (\n        cleanString &&\n        cleanString[string.length - 1].toUpperCase() ===\n            cleanString[string.length - 1].toLowerCase() &&\n        !nums.includes(Number(cleanString[string.length - 1]))\n    ) {\n        cleanString = cleanString.slice(0, cleanString.length - 1);\n\n        return cleanText(cleanString);\n    }\n    if (cleanString.length > 0) {\n        return cleanString;\n    } else {\n        return null;\n    }\n}\n","import React, { useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { DropDownHover } from \"../../../components/DropDown/DropDown\";\nimport {\n    updatePage,\n    updateStudentList,\n    deleteRoster,\n} from \"../../../Redux/actions\";\nimport { saveRoster } from \"../../../Lib/saveRoster\";\nimport { Button } from \"react-bootstrap\";\nimport { useNavigate } from \"react-router\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faArrowLeft } from \"@fortawesome/free-solid-svg-icons\";\n\nconst mapStateToProps = (state) => ({\n    currentPage: state.currentPage,\n    class: state.class,\n    student: state.student,\n    studentList: state.studentList,\n});\n\nconst mapDispatchToProps = {\n    updatePage,\n    updateStudentList,\n    deleteRoster,\n};\n\nfunction RosterPage(props) {\n    const [roster, setRoster] = useState(\"\");\n    const navigate = useNavigate();\n\n    function handleChange(e) {\n        saveRoster(e, (response) => {\n            setRoster(response);\n            props.deleteRoster();\n            props.updateStudentList(response);\n        });\n        //props.updateStudentList(response);\n\n        setTimeout(() => {\n            navigate(\"/students\");\n        }, 1500);\n    }\n\n    function ListStudents() {}\n\n    function AddStudents() {\n        return (\n            <React.Fragment>\n                <div className=\"form-container\">\n                    <section>\n                        <DropDownHover\n                            buttonTitle=\"Uploading Rosters\"\n                            content=\"To upload a roster, the file should be saved as a csv file (ends with .csv). When creating the file through excel, sheets, numbers or a similar spreadsheet program, place all students in the first column with one student in each row.  If you want names to be alphabatized, place last names first folowed by a comma then first names.\"\n                        />\n                    </section>\n                    <br />\n                    <Button\n                        variant={roster ? \"success\" : \"primary\"}\n                        className=\"mb-4\"\n                    >\n                        <label htmlFor=\"upload-roster\" className=\"\">\n                            {roster ? \"Success\" : \"Upload File\"}\n                        </label>\n                    </Button>\n                    <div className=\"input-group mb-3 d-flex justify-content-center justify-content-md-start\">\n                        <input\n                            id=\"upload-roster\"\n                            type=\"file\"\n                            accept=\".csv\"\n                            className=\"file\"\n                            onChange={handleChange}\n                            hidden\n                        />\n                        <div className=\"input-group-append\">\n                            <p>\n                                ( WARNING: Uploading a roster will overwrite\n                                your current roster! )\n                            </p>\n                        </div>\n                    </div>\n                </div>\n            </React.Fragment>\n        );\n    }\n\n    return (\n        <React.Fragment>\n            {props.hideHeader ? null : (\n                <div>\n                    <div className=\"d-inline\">\n                        <h1 className=\"header\">{props.class}</h1>\n                        <FontAwesomeIcon\n                            name=\"left-arrow\"\n                            icon={faArrowLeft}\n                            color=\"green\"\n                            className=\"back-arrow\"\n                            onClick={() => navigate(-1)}\n                        />\n                    </div>\n                    <hr />\n                </div>\n            )}\n            {props.studentsList ? <ListStudents /> : <AddStudents />}\n        </React.Fragment>\n    );\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(RosterPage);\n","import React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { updatePage, updateStudentList, deleteStudent } from \"../Redux/actions\";\nimport Confirm from \"./ConfirmModal\";\n\nconst mapStateToProps = (state) => ({\n    currentPage: state.currentPage,\n    gradebook: state.gradebook,\n    class: state.class,\n    student: state.student,\n    studentList: state.studentList,\n    dailyPoints: state.settings.dailyPoints,\n    settings: state.settings,\n});\n\nconst mapDispatchToProps = {\n    deleteStudent,\n    updatePage,\n    updateStudentList,\n};\n\nfunction ListStudents(props) {\n    const [studentPoints, setStudentPoints] = useState({});\n    const [attendance, setAttendance] = useState({});\n    const [note, setNote] = useState({});\n\n    const [studentToDelete, setStudentToDelete] = useState(\"\");\n    const [showModal, setShowModal] = useState(false);\n\n    const uncleanCurrentGb = props.gradebook;\n    const uncleanCurrentClass = props.class;\n\n    // removes symbols that can't be used in a javascript property/key name\n    const currentGb = uncleanCurrentGb.replace(\n        /[.,/#!$%^&*;:{}=\\-_`~()]/g,\n        \" \"\n    );\n    const currentClass = uncleanCurrentClass.replace(\n        /[.,/#!$%^&*;:{}=\\-_`~()]/g,\n        \" \"\n    );\n    const classKey = currentGb + \"-\" + currentClass;\n\n    //sets starting values for attendance and daily points\n    const { studentList } = props;\n\n    useEffect(() => {\n        console.log(\"setting starting values...\");\n        props.updatePage(\"Students\");\n        const studentsExist = studentList[classKey];\n        if (studentsExist) {\n            const totalStudents = studentList[classKey].length;\n            setStudentPoints((studentPoints) => {\n                let newState = {};\n                for (let i = 0; i < totalStudents; i++) {\n                    let studentId = i + \"-student\";\n                    newState = {\n                        ...newState,\n                        [studentId]:\n                            //if student points already exists, use that value, otherwise create it with starting daily points.\n                            studentPoints[studentId] !== undefined\n                                ? studentPoints[studentId]\n                                : props.dailyPoints,\n                        [studentId + \"changed\"]: 0,\n                    };\n                }\n\n                return newState;\n            });\n            setAttendance((attendance) => {\n                let newState = {};\n                for (let i = 0; i < totalStudents; i++) {\n                    let studentId = i + \"-student\";\n                    newState = {\n                        ...newState,\n                        [studentId]: attendance[studentId] || \"P\",\n                    };\n                }\n\n                return newState;\n            });\n            // sets all notes to not-clicked / off\n            setNote((note) => {\n                let newState = {};\n                for (let i = 0; i < totalStudents; i++) {\n                    let note1 = i + \"-note1\";\n                    let note2 = i + \"-note2\";\n                    let note3 = i + \"-note3\";\n                    let note4 = i + \"-note4\";\n                    newState = {\n                        ...newState,\n                        [note1]: note[note1] || false,\n                        [note2]: note[note2] || false,\n                        [note3]: note[note3] || false,\n                        [note4]: note[note4] || false,\n                    };\n                }\n\n                return newState;\n            });\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [studentList]);\n\n    function handleDecrement(e) {\n        //decrease student points by one.\n        let studentId = e.target.id[0];\n        if (e.target.id[2] === \"-\") {\n            studentId = e.target.id.slice(0, 2);\n        }\n        studentId += \"-student\";\n        let currentPoints = studentPoints[studentId];\n        if (currentPoints > 0) {\n            --currentPoints;\n        }\n        setStudentPoints((prevState) => ({\n            ...prevState,\n            [studentId]: currentPoints,\n            [studentId + \"changed\"]: studentPoints[studentId + \"changed\"] - 1,\n        }));\n    }\n\n    function handleIncrement(e) {\n        //increase student points by one.\n        let studentId = e.target.id[0];\n\n        //if the number of target id is two digits...\n        if (e.target.id[2] === \"-\") {\n            studentId = e.target.id.slice(0, 2);\n        }\n        studentId += \"-student\";\n        let currentPoints = studentPoints[studentId];\n        ++currentPoints;\n        setStudentPoints((prevState) => ({\n            ...prevState,\n            [studentId]: currentPoints,\n            [studentId + \"changed\"]: studentPoints[studentId + \"changed\"] + 1,\n        }));\n    }\n\n    function handleAttendance(e) {\n        let buttonName = e.currentTarget.name;\n        let studentId = e.target.id[0];\n        let studentIdNumber = e.target.id[0];\n        if (e.target.id[2] === \"-\") {\n            studentId = e.target.id.slice(0, 2);\n            studentIdNumber = e.target.id.slice(0, 2);\n        }\n        studentId += \"-student\";\n        let currentAttendance = attendance[studentId];\n\n        // Change current attendance to \"A\" (triggers class change on element)\n        if (currentAttendance === \"P\") {\n            setAttendance({ ...attendance, [studentId]: \"A\" });\n        } else if (currentAttendance === \"A\") {\n            setAttendance({ ...attendance, [studentId]: \"T\" });\n        } else {\n            setAttendance({ ...attendance, [studentId]: \"P\" });\n        }\n\n        handlePoints(e, studentIdNumber, buttonName);\n    }\n\n    function handleNote(e) {\n        let noteId = e.currentTarget.id;\n        let studentIdNumber;\n        let buttonName = e.currentTarget.name;\n        let noteName = e.currentTarget.name;\n\n        // if note is not active, add the active class and set it to true.\n        if (noteName !== \"note4\") {\n            setNote({\n                ...note,\n                [noteId]: !note[noteId],\n            });\n            // getting the first character of the note id which is a number.\n            studentIdNumber = e.target.id[0];\n            // if the note id number is 2 digits...\n            if (e.target.id[2] === \"-\") {\n                studentIdNumber = e.target.id.slice(0, 2);\n            }\n\n            // check if custom note was clicked, if so, if user entered note, change button to active.\n        } else if (noteName === \"note4\") {\n            e.currentTarget.value.length > 0\n                ? setNote({\n                      ...note,\n                      [noteId]: true,\n                  })\n                : setNote({\n                      ...note,\n                      [noteId]: false,\n                  });\n        }\n        handlePoints(e, studentIdNumber, buttonName);\n    }\n\n    function handlePoints(e, studentIdNumber, buttonName) {\n        const studentId = studentIdNumber + \"-student\";\n        const buttonElements = Array.from(e.target.parentElement.children);\n        const buttonsClicked = [];\n\n        buttonElements.forEach((button, i) => {\n            if (i === 0) {\n                if (button.value === \"A\") {\n                    buttonName !== \"attendance\"\n                        ? buttonsClicked.push(props.settings.absentPoints)\n                        : buttonsClicked.push(props.settings.tardyPoints);\n                } else if (button.value === \"T\") {\n                    if (buttonName !== \"attendance\") {\n                        buttonsClicked.push(props.settings.tardyPoints);\n                    }\n                } else if (buttonName === \"attendance\") {\n                    buttonsClicked.push(props.settings.absentPoints);\n                }\n            }\n            // check to see if the notes are clicked.\n            else if (i > 0 && i < 4) {\n                let buttonClicked = button.getAttribute(\"data-note\");\n                let buttonClickedBool = buttonClicked === \"true\" ? true : false;\n                if (buttonName === button.name) {\n                    buttonClickedBool = !buttonClickedBool;\n                }\n                if (buttonClickedBool) {\n                    buttonsClicked.push(props.settings[button.name + \"Points\"]);\n                }\n            }\n        });\n        let pointValues =\n            buttonsClicked.length > 0\n                ? buttonsClicked.reduce((total, current) => total + current)\n                : 0;\n        let pointsChanged = studentPoints[studentId + \"changed\"]; //add to currentPoints to subtract from customized points rather than base value set from daily points.\n        let currentPoints =\n            props.settings.dailyPoints + pointValues + pointsChanged;\n\n        if (currentPoints < 0) {\n            currentPoints = 0;\n        }\n        setStudentPoints((prevState) => ({\n            ...prevState,\n            [studentId]: currentPoints,\n        }));\n    }\n\n    function handleDelete(e) {\n        setStudentToDelete(e.currentTarget.id.split(\"-\")[0]);\n        setShowModal(true);\n    }\n\n    function handleModal(e) {\n        setShowModal(false);\n        e.target.name === \"delete\" && props.deleteStudent(studentToDelete);\n    }\n\n    const studentButtons = props.studentList[classKey].map((student, i) => {\n        const studentId = i + \"-student\";\n\n        return (\n            <React.Fragment>\n                <div\n                    className={\n                        props.toggleDelete ? \"student delete\" : \"student\"\n                    }\n                    name=\"student-info\"\n                    key={student + \"-info\"}\n                    id={student + \"-info\"}\n                    onClick={props.toggleDelete ? handleDelete : null}\n                >\n                    <div className=\"flex-space-between\">\n                        {/* Student Button with their name */}\n                        <input\n                            className=\"tl-round student-button button\"\n                            type=\"button\"\n                            key={student}\n                            id={i + \"-\" + student}\n                            name=\"name\"\n                            value={student}\n                            onClick={\n                                props.toggleDelete ? undefined : handleDecrement\n                            }\n                        />\n                        <input\n                            className=\"tr-round button daily-points \"\n                            key={student + \"-points\"}\n                            name=\"daily-points\"\n                            type=\"button\"\n                            id={i + \"-points\"}\n                            value={studentPoints[studentId]}\n                            onClick={\n                                props.toggleDelete ? undefined : handleIncrement\n                            }\n                        />\n                    </div>\n                    <div className=\"flex-space-between notes\" data-toggle=\"off\">\n                        <input\n                            className={\n                                \"bl-round button absent note\" +\n                                \" \" +\n                                attendance[studentId]\n                            }\n                            name=\"attendance\"\n                            type=\"button\"\n                            key={student + \"-attendance\"}\n                            id={i + \"-attendance\"}\n                            data-toggle=\"off\"\n                            value={attendance[studentId]}\n                            onClick={\n                                props.toggleDelete\n                                    ? undefined\n                                    : handleAttendance\n                            }\n                        />\n                        <input\n                            className=\"button absent note\"\n                            name=\"note1\"\n                            type=\"button\"\n                            id={i + \"-note1\"}\n                            data-note={note[i + \"-note1\"]}\n                            onClick={\n                                props.toggleDelete ? undefined : handleNote\n                            }\n                            value={props.settings.note1}\n                        />\n                        <input\n                            className=\"button absent note\"\n                            name=\"note2\"\n                            type=\"button\"\n                            id={i + \"-note2\"}\n                            data-note={note[i + \"-note2\"]}\n                            onClick={\n                                props.toggleDelete ? undefined : handleNote\n                            }\n                            value={props.settings.note2}\n                        />\n                        <input\n                            className=\"button absent note \"\n                            name=\"note3\"\n                            type=\"button\"\n                            id={i + \"-note3\"}\n                            data-note={note[i + \"-note3\"]}\n                            onClick={\n                                props.toggleDelete ? undefined : handleNote\n                            }\n                            value={props.settings.note3}\n                        />\n                        <input\n                            className=\"br-round button absent note \"\n                            style={{ textAlign: \"center\" }}\n                            name=\"note4\"\n                            type=\"text\"\n                            key={student + \"-note4\"}\n                            id={i + \"-note4\"}\n                            placeholder=\"?\"\n                            data-note={note[i + \"-note4\"]}\n                            defaultValue=\"\"\n                            onChange={\n                                props.toggleDelete ? undefined : handleNote\n                            }\n                        />\n                    </div>\n                </div>\n            </React.Fragment>\n        );\n    });\n    return (\n        <React.Fragment>\n            {showModal && (\n                <Confirm\n                    item={studentToDelete}\n                    showModal={showModal}\n                    handleModal={handleModal}\n                    warningMessageString={`Permanently delete ${studentToDelete}?`}\n                />\n            )}\n            {studentButtons}\n        </React.Fragment>\n    );\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ListStudents);\n","import React from \"react\";\nimport { Modal } from \"react-bootstrap\";\nimport \"./SuccessModal.scss\";\n\nfunction SuccessModal({ showSuccess, title, messageString }) {\n    return (\n        <>\n            <Modal\n                show={showSuccess}\n                dialogClassName=\"successModal\"\n                centered\n                size=\"sm\"\n            >\n                <Modal.Header\n                    bsPrefix=\"successModalHeader\"\n                    className=\"bg-tranparent\"\n                >\n                    <Modal.Title bsPrefix=\"successModalTitle\">\n                        {title}\n                    </Modal.Title>\n                </Modal.Header>\n                <Modal.Body bsPrefix=\"successModalBody\">\n                    {messageString}\n                </Modal.Body>\n            </Modal>\n        </>\n    );\n}\n\nexport default SuccessModal;\n","import React, { useEffect, useState, useRef } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Button, Modal } from \"react-bootstrap\";\nimport {\n    updatePage,\n    updateStudentList,\n    updateStudentInfo,\n} from \"../../../Redux/actions\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPlusCircle, faMinusCircle } from \"@fortawesome/free-solid-svg-icons\";\nimport { useNavigate } from \"react-router\";\nimport RosterPage from \"../RosterPage/RosterPage\";\nimport ListStudents from \"../../../components/ListStudents\";\nimport \"./StudentPage.scss\";\nimport SuccessModal from \"../../../components/SuccessModal\";\n\nconst mapStateToProps = (state) => ({\n    currentPage: state.currentPage,\n    gradebook: state.gradebook,\n    class: state.class,\n    student: state.student,\n    studentList: state.studentList,\n    dailyPoints: state.settings.dailyPoints,\n});\n\nconst mapDispatchToProps = {\n    updatePage,\n    updateStudentList,\n    updateStudentInfo,\n};\n\nfunction StudentsPage(props) {\n    const [toggleDelete, setToggleDelete] = useState(false);\n    const [newStudent, setNewStudent] = useState(\"\");\n    const [showModal, setShowModal] = useState(false);\n\n    const [showSuccess, setShowSuccess] = useState(false);\n    const target = useRef(null);\n\n    //Remove punctuation in class & gradebook names to match db key\n    const uncleanCurrentGb = props.gradebook;\n    const uncleanCurrentClass = props.class;\n    const currentGb = uncleanCurrentGb.replace(\n        /[.,/#!$%^&*;:{}=\\-_`~()]/g,\n        \" \"\n    );\n    const currentClass = uncleanCurrentClass.replace(\n        /[.,/#!$%^&*;:{}=\\-_`~()]/g,\n        \" \"\n    ); //key/property used in db for studentLists and studentInfo\n    const classKey = currentGb + \"-\" + currentClass;\n\n    useEffect(() => {\n        props.updatePage(\"Students\");\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    const navigate = useNavigate();\n\n    const addStudentModal = (\n        <Modal\n            show={showModal}\n            centered\n            size=\"sm\"\n            dialogClassName=\"p-4 p-sm-2 p-md-2\"\n            onHide={toggleModal}\n        >\n            <Modal.Header closeButton className=\"light-header\">\n                <Modal.Title className=\"font-weight-bold text-dark\">\n                    Add Students\n                </Modal.Title>\n            </Modal.Header>\n            <Modal.Body className=\"text-dark\">\n                <label htmlFor=\"create-student text-align-center\">\n                    Add Student\n                </label>\n                <div className=\"input-group mb-3 d-flex justify-content-start\">\n                    <input\n                        id=\"create-student\"\n                        type=\"text\"\n                        value={newStudent}\n                        placeholder=\"Student Name\"\n                        className=\"text-input\"\n                        onChange={handleChange}\n                        onKeyDown={handleSave}\n                    />\n                </div>\n                <p>Press Enter or click add</p>\n            </Modal.Body>\n            <Modal.Footer className=\"d-flex justify-content-between mx-0\">\n                <div className=\"mx-0\">\n                    <Button\n                        className=\"m-1 green-button text-dark mx-0\"\n                        name=\"cancel\"\n                        id=\"save-student\"\n                        onClick={handleSave}\n                    >\n                        Add\n                    </Button>\n                </div>\n\n                <Button\n                    className=\"mr-auto green-button text-dark mx-0\"\n                    name=\"upload-roster\"\n                    id=\"save-student\"\n                    onClick={() => navigate(\"/uploadRoster\")}\n                    style={{}}\n                >\n                    Upload?\n                </Button>\n                <Button\n                    className=\"ml-1 grey-button text-dark mx-0\"\n                    name=\"delete\"\n                    onClick={toggleModal}\n                >\n                    Finished\n                </Button>\n            </Modal.Footer>\n        </Modal>\n    );\n\n    function handleChange(e) {\n        if (e.target.id === \"create-student\") {\n            setNewStudent(e.target.value);\n        }\n    }\n\n    function handleSave(e) {\n        if (\n            (newStudent && e.key === \"Enter\") ||\n            (newStudent && e.target.id === \"save-student\")\n        ) {\n            props.updateStudentList([newStudent]);\n            setNewStudent(\"\");\n        }\n    }\n\n    function handleDelete(e) {\n        setToggleDelete(!toggleDelete);\n    }\n\n    function toggleModal(e) {\n        if (e && e.currentTarget.id === \"add-class-button\") {\n            setShowModal(true);\n            setToggleDelete(false);\n        } else {\n            setShowModal(false);\n            setNewStudent(\"\");\n        }\n    }\n\n    // submits current evaluation for each student to redux and firebase\n    function handleSubmit(e) {\n        // date is submitted and used to determine if the submission should overwrite the current day or add to grades.\n        const date = new Date().toLocaleDateString();\n        const students = e.target.elements;\n\n        // object that will contain all student data\n        const studentInfoObj = {};\n        e.preventDefault();\n        let studentName = \"\";\n        let studentPoints = \"\";\n        let studentNotes = [];\n        let studentAttendance = \"\";\n\n        // is set to true once all notes and data for a student have been iterated, then it's reset to true\n        let finishedOneStudent = false;\n        for (let i = 0; i < students.length - 1; i++) {\n            if (students[i].name === \"name\") {\n                studentName = students[i].value;\n                //add student as key\n                studentInfoObj[studentName] = [];\n            }\n            if (students[i].name === \"daily-points\") {\n                studentPoints = students[i].value;\n            }\n            if (students[i].name === \"attendance\") {\n                studentAttendance = students[i].value;\n            }\n            if (\n                students[i].name.slice(0, 4) === \"note\" &&\n                students[i].dataset.note === \"true\"\n            ) {\n                studentNotes.push(students[i].value);\n            }\n            if (students[i].name === \"note4\") {\n                finishedOneStudent = true;\n                console.log(\"finished student \", finishedOneStudent);\n            }\n            if (\n                studentName &&\n                studentPoints &&\n                studentAttendance &&\n                finishedOneStudent\n            ) {\n                const studentObj = {\n                    points: studentPoints,\n                    notes: studentNotes,\n                    attendance: studentAttendance,\n                    date: date,\n                };\n                studentInfoObj[studentName].push(studentObj);\n                studentName = \"\";\n                studentPoints = \"\";\n                studentNotes = [];\n                studentAttendance = \"\";\n                finishedOneStudent = false;\n            }\n        }\n        console.log(\"studentInfoObj \", studentInfoObj);\n        props.updateStudentInfo(studentInfoObj, date);\n        setShowSuccess(true);\n\n        setTimeout(() => {\n            setShowSuccess(false);\n        }, 3000);\n    }\n\n    console.log(\"render count: \");\n    return (\n        <React.Fragment>\n            <h1 className=\"header\">{props.class}</h1>\n            <hr />\n            <div className=\"form-container\">\n                <form onSubmit={handleSubmit}>\n                    {props.studentList[classKey] ? (\n                        <ListStudents toggleDelete={toggleDelete} />\n                    ) : (\n                        <div>\n                            {/* addStudentRoster() */}\n                            <RosterPage hideHeader={true} />\n                        </div>\n                    )}\n                    {showModal ? (\n                        addStudentModal\n                    ) : (\n                        <div className=\"d-flex justify-content-between align-items-center w-100\">\n                            <div id=\"add-class-button\" onClick={toggleModal}>\n                                <FontAwesomeIcon\n                                    name=\"add-icon\"\n                                    icon={faPlusCircle}\n                                    className=\"plus-icon m-4\"\n                                />\n                            </div>\n                            <SuccessModal\n                                showSuccess={showSuccess}\n                                title=\"Saving\"\n                                messageString=\"Information has been submitted.\"\n                            />\n                            {props.studentList[classKey] &&\n                            props.studentList[classKey].length > 0 ? (\n                                <Button\n                                    className=\"submit-button btn-lg\"\n                                    id=\"submit-button\"\n                                    type=\"submit\"\n                                    ref={target}\n                                >\n                                    Submit\n                                </Button>\n                            ) : null}\n\n                            <div onClick={handleDelete} id=\"delete-a-student\">\n                                <FontAwesomeIcon\n                                    name=\"delete-icon\"\n                                    icon={faMinusCircle}\n                                    className={\n                                        toggleDelete\n                                            ? \"minus-icon m-4 highlight\"\n                                            : \"minus-icon m-4\"\n                                    }\n                                />\n                                <br />\n                            </div>\n                        </div>\n                    )}\n                </form>\n            </div>\n        </React.Fragment>\n    );\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(StudentsPage);\n","import React from \"react\";\n\nexport function InfoPage({ title }) {\n    return (\n        <div className=\"container\">\n            <h1 className=\"header\">Info</h1>\n            <hr />\n            <section>\n                <h2>ABOUT:</h2>\n                <p>\n                    Coach's Clipboard is a daily assessment app for coaches and\n                    PE teachers. The intent of the app is to replace the\n                    clipboard typically used to track and evaluate players and\n                    students.\n                </p>\n            </section>\n            <br />\n            <section className=\" pb-4\">\n                <h2>SETUP:</h2>\n\n                <ul>\n                    <li>\n                        From the menu, go to the gradebook page to setup your\n                        first gradebook. For example, \"Fall 22\" or \"JV Baseball\n                        22\".\n                    </li>\n                    <li>\n                        Once you create a gradebook, you will be redirected to\n                        the classes page. Here you can create your classes,\n                        teams that you will be evaluating.\n                    </li>\n                    <li>\n                        Now click on a class or team that you created. You can\n                        add students or players manually or upload a .csv file.\n                    </li>\n                    <li>\n                        Once you have students on the list, you can begin\n                        evaluating them. Click their name to deduct points or\n                        click on the points icon to add points.\n                    </li>\n                    <li>\n                        While on the students evaluation page, you will notice a\n                        new menu item called student Info. After submitting you\n                        first evaluation, you can go to student Info to see more\n                        information.\n                    </li>\n                    <li>\n                        Next, you will will want to customize your notes and\n                        starting daily points. Go to settings to change the\n                        three default notes and their affects. The 4th note is a\n                        custom note marked with a question mark.\n                    </li>\n                </ul>\n            </section>\n            <section className=\"pb-5\">\n                <h2>UPLOADING ROSTER:</h2>\n                <p>\n                    {\" \"}\n                    To upload a roster, create an excel, pages, or google sheets\n                    file with the students or players names listed in the first\n                    column. Save the document as a .csv file. Click on the class\n                    or team you want to upload the file to and click on the \"+\"\n                    icon or on the upload roster page at the top. Click upload\n                    and choose the file.\n                </p>\n            </section>\n        </div>\n    );\n}\n","import React, { useRef, useState } from \"react\";\nimport { Button } from \"react-bootstrap\";\nimport { connect } from \"react-redux\";\nimport { useNavigate } from \"react-router-dom\";\nimport { updateSettings } from \"../../Redux/actions\";\nimport SuccessModal from \"../../components/SuccessModal\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faArrowLeft } from \"@fortawesome/free-solid-svg-icons\";\nimport \"./SettingsPage.scss\";\n\nconst mapStateToProps = (state) => {\n    return {\n        currentPage: state.currentPage,\n        settings: state.settings,\n    };\n};\n\nconst mapDispatchToProps = {\n    updateSettings,\n};\n\nexport function SettingsPage(props) {\n    const [showSaved, setShowSaved] = useState(false);\n\n    const dPointsRef = useRef();\n    const absentPointsRef = useRef();\n    const tardyPointsRef = useRef();\n    const n1Ref = useRef();\n    const n2Ref = useRef();\n    const n3Ref = useRef();\n    const n1PointsRef = useRef();\n    const n2PointsRef = useRef();\n    const n3PointsRef = useRef();\n\n    const navigate = useNavigate();\n\n    function handleSubmit(e) {\n        e.preventDefault();\n        if (e.keyCode !== 13) {\n            console.log(\"submitting\");\n            const settingsObj = {\n                dailyPoints: Number(dPointsRef.current.value),\n                absentPoints: Number(absentPointsRef.current.value),\n                tardyPoints: Number(tardyPointsRef.current.value),\n                note1: n1Ref.current.value,\n                note1Points: Number(n1PointsRef.current.value),\n                note2: n2Ref.current.value,\n                note2Points: Number(n2PointsRef.current.value),\n                note3: n3Ref.current.value,\n                note3Points: Number(n3PointsRef.current.value),\n            };\n            props.updateSettings(settingsObj);\n            setShowSaved(true);\n            setTimeout(() => {\n                setShowSaved(false);\n            }, 2000);\n        }\n    }\n\n    return (\n        <React.Fragment>\n            <h1 className=\"header\">Settings</h1>\n            <FontAwesomeIcon\n                name=\"left-arrow\"\n                icon={faArrowLeft}\n                color=\"green\"\n                className=\"back-arrow\"\n                onClick={() => navigate(-1)}\n            />\n            <hr />\n            <div className=\"form-container\">\n                <form\n                    onSubmit={handleSubmit}\n                    className=\"d-flex flex-column align-items-center  align-items-lg-end settings-form\"\n                >\n                    <table>\n                        <tbody>\n                            <tr>\n                                <td>\n                                    Starting Daily Points:{\" \"}\n                                    <input\n                                        type=\"number\"\n                                        className=\"mb-4\"\n                                        maxLength={2}\n                                        min={0}\n                                        max={99}\n                                        defaultValue={\n                                            props.settings.dailyPoints\n                                        }\n                                        ref={dPointsRef}\n                                    ></input>\n                                </td>\n                            </tr>\n                        </tbody>\n                    </table>\n                    <table className=\"settings-table\">\n                        <thead>\n                            <tr>\n                                <th>Attendance</th>\n                                <th className=\"\">Points Effect</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            <tr>\n                                <td>Absent: </td>\n                                <td>\n                                    Number Value:{\" \"}\n                                    <input\n                                        type=\"number\"\n                                        className=\"note-settings\"\n                                        maxLength={3}\n                                        ref={absentPointsRef}\n                                        defaultValue={\n                                            props.settings.absentPoints\n                                        }\n                                    />\n                                </td>\n                            </tr>\n                            <tr>\n                                <td>Tardy: </td>\n                                <td>\n                                    Number Value:{\" \"}\n                                    <input\n                                        type=\"number\"\n                                        className=\"note-settings\"\n                                        maxLength={3}\n                                        ref={tardyPointsRef}\n                                        defaultValue={\n                                            props.settings.tardyPoints\n                                        }\n                                    />\n                                </td>\n                            </tr>\n                        </tbody>\n                    </table>\n                    <table className=\"settings-table\">\n                        <thead>\n                            <tr>\n                                <th>Notes</th>\n                                <th className=\"\">Points Effect</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            <tr>\n                                <td>\n                                    1st Note:{\" \"}\n                                    <input\n                                        type=\"text\"\n                                        className=\"note-settings\"\n                                        placeholder=\"Example: EX\"\n                                        maxLength={2}\n                                        ref={n1Ref}\n                                        defaultValue={props.settings.note1}\n                                    ></input>\n                                </td>\n                                <td>\n                                    Number Value:{\" \"}\n                                    <input\n                                        type=\"number\"\n                                        className=\"note-settings\"\n                                        placeholder=\"Example: -5\"\n                                        maxLength={3}\n                                        ref={n1PointsRef}\n                                        defaultValue={\n                                            props.settings.note1Points\n                                        }\n                                    />\n                                </td>\n                            </tr>\n                            <tr>\n                                <td>\n                                    2nd Note:{\" \"}\n                                    <input\n                                        type=\"text\"\n                                        className=\"note-settings\"\n                                        maxLength={2}\n                                        ref={n2Ref}\n                                        defaultValue={props.settings.note2}\n                                    />\n                                </td>\n                                <td>\n                                    Number Value:{\" \"}\n                                    <input\n                                        type=\"number\"\n                                        className=\"note-settings\"\n                                        maxLength={3}\n                                        ref={n2PointsRef}\n                                        defaultValue={\n                                            props.settings.note2Points\n                                        }\n                                    />\n                                </td>\n                            </tr>\n                            <tr>\n                                <td>\n                                    3rd Note:{\" \"}\n                                    <input\n                                        type=\"text\"\n                                        className=\"note-settings\"\n                                        maxLength={2}\n                                        ref={n3Ref}\n                                        defaultValue={props.settings.note3}\n                                    />\n                                </td>\n                                <td>\n                                    Number Value:{\" \"}\n                                    <input\n                                        type=\"number\"\n                                        className=\"note-settings\"\n                                        maxLength={3}\n                                        ref={n3PointsRef}\n                                        defaultValue={\n                                            props.settings.note3Points\n                                        }\n                                    />\n                                </td>\n                            </tr>\n                        </tbody>\n                    </table>\n                    <div className=\"p-5 d-flex justify-content-center align-items-center settings-btn-container\">\n                        <Button\n                            variant=\"secondary\"\n                            type=\"submit\"\n                            size=\"lg\"\n                            id=\"save-settings\"\n                        >\n                            Save\n                        </Button>\n                    </div>\n                </form>\n            </div>\n            {showSaved ? (\n                <SuccessModal\n                    showSuccess={showSaved}\n                    title={\"Saving\"}\n                    messageString={\"Settings have been updated.\"}\n                />\n            ) : null}\n        </React.Fragment>\n    );\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SettingsPage);\n","import \"./ListStudentInfo.scss\";\n\nfunction DesktopStudentInfo(props) {\n    return (\n        <tr>\n            <td>{props.student}</td>\n            <td>{props.totalPoints}</td>\n            <td>{props.gradePercentage}</td>\n            <td>{props.notes}</td>\n            <td>{props.absences}</td>\n            <td>{props.tardies}</td>\n        </tr>\n    );\n}\n\nexport default DesktopStudentInfo;\n","import React from \"react\";\nimport { Dropdown, DropdownButton } from \"react-bootstrap\";\nimport \"./DropDown.scss\";\n\nfunction DropDownStudentInfo(props) {\n    return (\n        <DropdownButton\n            id=\"dropdown-basic-button\"\n            key={props.id}\n            variant=\"secondary\"\n            menuVariant=\"dark\"\n            title={props.student}\n            className=\"m-auto d-flex justify-content-center w-200\"\n            bsPrefix=\"button student-button info-btn \"\n        >\n            <Dropdown.Item bsPrefix=\"dropdown-items\">\n                Total Points: {props.totalPoints}\n            </Dropdown.Item>\n            <Dropdown.Item bsPrefix=\"dropdown-items\">\n                Grade Percentage: {props.gradePercentage}\n            </Dropdown.Item>\n            <Dropdown.Item bsPrefix=\"dropdown-items\">\n                Notes Summary: {props.notes}\n            </Dropdown.Item>\n            <Dropdown.Item bsPrefix=\"dropdown-items\">\n                Absences: {props.absences}\n            </Dropdown.Item>\n            <Dropdown.Item bsPrefix=\"dropdown-items\">\n                Tardies: {props.tardies}\n            </Dropdown.Item>\n        </DropdownButton>\n    );\n}\n\nexport default DropDownStudentInfo;\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { updatePage, updateStudentList, deleteStudent } from \"../Redux/actions\";\nimport { useViewport } from \"../utils/utilities\";\nimport DesktopStudentInfo from \"./DesktopStudentInfo\";\nimport DropDownStudentInfo from \"./DropDown/DropDownStudentInfo\";\nimport \"./ListStudentInfo.scss\";\n\nconst mapStateToProps = (state) => ({\n    currentPage: state.currentPage,\n    gradebook: state.gradebook,\n    class: state.class,\n    student: state.student,\n    studentList: state.studentList,\n    studentInfo: state.studentInfo,\n    dailyPoints: state.settings.dailyPoints,\n    settings: state.settings,\n});\n\nconst mapDispatchToProps = {\n    deleteStudent,\n    updatePage,\n    updateStudentList,\n};\n\nfunction ListStudentsInfo(props) {\n    const uncleanCurrentGb = props.gradebook;\n    const uncleanCurrentClass = props.class;\n    const { screenWidth } = useViewport();\n    const breakpoint = 800;\n    const currentGb = uncleanCurrentGb.replace(\n        /[.,/#!$%^&*;:{}=\\-_`~()]/g,\n        \" \"\n    );\n    const currentClass = uncleanCurrentClass.replace(\n        /[.,/#!$%^&*;:{}=\\-_`~()]/g,\n        \" \"\n    );\n    const classKey = currentGb + \"-\" + currentClass;\n\n    //placed outside of getTotalPoints so only needs to be found once for all students rather than on each call to getTotalPoints\n    let pointsPossible = Number(props.studentInfo[classKey].totalPoints);\n\n    function getFilteredEntries(studentArr) {\n        let startIndex;\n        let endIndex;\n\n        if (Array.isArray(studentArr)) {\n            startIndex = studentArr.findIndex(\n                (student) => new Date(student.date) >= new Date(props.startDate)\n            );\n            endIndex = studentArr.findIndex(\n                (student) => new Date(student.date) > new Date(props.endDate)\n            );\n        }\n        if (startIndex < 0) {\n            return [];\n        }\n        if (endIndex < 0) {\n            return studentArr.slice(startIndex);\n        } else {\n            return studentArr.slice(startIndex, endIndex);\n        }\n    }\n\n    function getTotalPoints(student) {\n        const pointsArray = [];\n        const studentArr = props.studentInfo[classKey][student];\n\n        if (props.startDate) {\n            const filteredEntries = getFilteredEntries(studentArr);\n            filteredEntries.forEach((entry) => pointsArray.push(+entry.points));\n            pointsPossible = filteredEntries.length * props.dailyPoints;\n        } else if (Array.isArray(studentArr)) {\n            studentArr.forEach((entry) => {\n                pointsArray.push(+entry.points);\n            });\n        }\n\n        return pointsArray.reduce((a, b) => a + b, 0) + `/${pointsPossible}`;\n    }\n\n    function getGradePercentage(student) {\n        const pointsArray = [];\n        const studentArr = props.studentInfo[classKey][student];\n\n        if (props.startDate) {\n            const filteredEntries = getFilteredEntries(studentArr);\n            filteredEntries.forEach((entry) => pointsArray.push(+entry.points));\n            pointsPossible = filteredEntries.length * props.dailyPoints;\n        } else if (Array.isArray(studentArr)) {\n            studentArr.forEach((entry) => {\n                pointsArray.push(+entry.points);\n            });\n        }\n\n        return (\n            Math.round(\n                (pointsArray.reduce((a, b) => a + b, 0) / pointsPossible) * 100\n            ) + \"%\"\n        );\n    }\n\n    function getNotes(student) {\n        const [note1, note2, note3] = [\n            props.settings.note1,\n            props.settings.note2,\n            props.settings.note3,\n        ];\n        let n1Count = 0;\n        let n2Count = 0;\n        let n3Count = 0;\n\n        const notesArray = [];\n        let studentArr = props.studentInfo[classKey][student];\n\n        if (Array.isArray(studentArr)) {\n            if (props.startDate) {\n                const filteredEntries = getFilteredEntries(studentArr);\n                studentArr = filteredEntries;\n            }\n            studentArr.forEach((entry) => {\n                if (Array.isArray(entry.notes)) {\n                    entry.notes.forEach((note) => {\n                        if (note === note1) {\n                            n1Count++;\n                        } else if (note === note2) {\n                            n2Count++;\n                        } else if (note === note3) {\n                            n3Count++;\n                        } else {\n                            notesArray.push(\" \" + note);\n                        }\n                    });\n                }\n            });\n        }\n        let notesSummary = \"\";\n        if (n1Count) {\n            notesSummary += `${note1}:${n1Count} `;\n        }\n        if (n2Count) {\n            notesSummary += `${note2}:${n2Count} `;\n        }\n        if (n3Count) {\n            notesSummary += `${note3}:${n3Count} `;\n        }\n        if (notesArray.length > 0) {\n            notesSummary += \"other:\" + notesArray;\n        }\n        return notesSummary;\n    }\n\n    function getAbsences(student) {\n        let aCount = 0;\n        let studentArr = props.studentInfo[classKey][student];\n\n        if (Array.isArray(studentArr)) {\n            if (props.startDate) {\n                const filteredEntries = getFilteredEntries(studentArr);\n                studentArr = filteredEntries;\n            }\n            studentArr.forEach((entry) =>\n                entry.attendance === \"A\" ? aCount++ : null\n            );\n        }\n        return aCount;\n    }\n    function getTardies(student) {\n        let tCount = 0;\n        let studentArr = props.studentInfo[classKey][student];\n\n        if (Array.isArray(studentArr)) {\n            if (props.startDate) {\n                const filteredEntries = getFilteredEntries(studentArr);\n                studentArr = filteredEntries;\n            }\n            studentArr.forEach((entry) =>\n                entry.attendance === \"T\" ? tCount++ : null\n            );\n        }\n        return tCount;\n    }\n\n    const studentInfo = Object.keys(props.studentInfo[classKey]).map(\n        (student, i) => {\n            if (student !== \"dateLastSubmitted\" && student !== \"totalPoints\") {\n                return (\n                    <React.Fragment>\n                        {screenWidth < breakpoint ? (\n                            <div\n                                className={\"student\"}\n                                name=\"student-info\"\n                                key={student + \"-info\"}\n                            >\n                                <DropDownStudentInfo\n                                    student={student}\n                                    className=\"student-info-button\"\n                                    totalPoints={getTotalPoints(\n                                        student,\n                                        \"points\"\n                                    )}\n                                    gradePercentage={getGradePercentage(\n                                        student\n                                    )}\n                                    notes={getNotes(student)}\n                                    absences={getAbsences(student)}\n                                    tardies={getTardies(student)}\n                                    id={i + student}\n                                    key={i + student + \"-key\"}\n                                />\n                            </div>\n                        ) : (\n                            <DesktopStudentInfo\n                                student={student}\n                                totalPoints={getTotalPoints(student, \"points\")}\n                                gradePercentage={getGradePercentage(student)}\n                                notes={getNotes(student)}\n                                absences={getAbsences(student)}\n                                tardies={getTardies(student)}\n                                key={i + student + \"-dKey\"}\n                            />\n                        )}\n                    </React.Fragment>\n                );\n            }\n            return null;\n        }\n    );\n    // checks screen size and displays different view.\n    return screenWidth < breakpoint ? (\n        studentInfo\n    ) : (\n        <div className=\"d-flex justify-content-center\">\n            <table className=\"app-container\">\n                <thead>\n                    <tr>\n                        <th className=\"wide\">Student</th>\n                        <th className=\"narrow\">Total Points</th>\n                        <th className=\"narrow\">Grade Percentage</th>\n                        <th className=\"wide\">Notes Summary</th>\n                        <th className=\"narrow\">Absences</th>\n                        <th className=\"narrow\">Tardies</th>\n                    </tr>\n                </thead>\n                <tbody className>{studentInfo}</tbody>\n            </table>\n        </div>\n    );\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ListStudentsInfo);\n","import { useState, useEffect } from \"react\";\n\nexport function useViewport() {\n    const [screenWidth, setScreenWidth] = useState(window.innerWidth);\n\n    useEffect(() => {\n        const handleWindowResize = () => setScreenWidth(window.innerWidth);\n        window.addEventListener(\"resize\", handleWindowResize);\n        return () => window.removeEventListener(\"resize\", handleWindowResize);\n    }, []);\n\n    // Return the width so we can use it in our components\n    return { screenWidth };\n}\n","import React from \"react\";\nimport \"./DatePicker.scss\";\n\nfunction DatePicker({\n    label,\n    name,\n    id,\n    startDate /*number of days to subtract from current*/,\n    max,\n    changeHandler,\n}) {\n    return (\n        <React.Fragment>\n            <label className=\"date-picker-label align-self-center\">\n                {label}\n            </label>\n\n            <input\n                className=\"date-input\"\n                type=\"date\"\n                id={id}\n                name={name}\n                value={startDate}\n                max={max ? max : null}\n                onChange={changeHandler}\n            />\n        </React.Fragment>\n    );\n}\n\nexport default DatePicker;\n","import \"./ToggleSwitch.scss\";\n\nfunction ToggleSwitch({ checked, handleToggle, label }) {\n    return (\n        <div className=\"d-block\">\n            <label htmlFor=\"checkbox\" className=\"mr-3\">\n                {label}\n            </label>\n            <label className=\"switch\">\n                <input\n                    type=\"checkbox\"\n                    checked={checked}\n                    id=\"checkbox\"\n                    onChange={handleToggle}\n                />\n                <span className=\"slider round\"></span>\n            </label>\n        </div>\n    );\n}\n\nexport default ToggleSwitch;\n","import React, { useEffect, useState } from \"react\";\nimport DatePicker from \"./DatePicker\";\nimport ToggleSwitch from \"./ToggleSwitch\";\n\nfunction FilterDays(props) {\n    const date = new Date();\n    const today = date.toISOString().split(\"T\")[0];\n    const defaultStartDate = new Date(\n        new Date().setDate(new Date().getDate() - 5)\n    );\n\n    const [endDate, setEndDate] = useState(date.toISOString().split(\"T\")[0]);\n    const [startDate, setStartDate] = useState(\n        defaultStartDate.toISOString().split(\"T\")[0]\n    );\n    const [filter, setFilter] = useState(false);\n\n    function handleToggle() {\n        setFilter(!filter);\n        //tell student info if the filter is on. If off, filter dates will be set to null.\n        props.checkFilter(!filter);\n    }\n\n    useEffect(() => {\n        //if filter is on, send the date filters to studentInfo to handle them\n        if (filter) {\n            props.handleDate(startDate, endDate);\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [filter, startDate, endDate]);\n\n    function handleDateChange(e) {\n        if (e.target.name === \"from\") {\n            setStartDate(e.target.value); //sets current date to yyyy-mm-dd\n\n            // props.handleDate(startDateToFind, endDateToFind);\n\n            return;\n        }\n\n        // props.handleDate(endDateToFind, endDateToFind);\n        return setEndDate(e.target.value);\n    }\n\n    return (\n        <div\n            className=\"d-inline-flex flex-column flex-lg-row align-items-center justify-content-between w-100 mb-4\"\n            style={{ minHeight: 65 }}\n        >\n            <div className=\"\">\n                <ToggleSwitch\n                    checked={filter}\n                    handleToggle={handleToggle}\n                    label=\"Filter Results\"\n                />\n            </div>\n            {filter ? (\n                <div className=\"d-flex flex-column align-items-end flex-lg-row\">\n                    <DatePicker\n                        id=\"from\"\n                        name=\"from\"\n                        startDate={startDate} // default calendar date. Format = \"yyyy/mm/dd\"\n                        max={endDate}\n                        changeHandler={handleDateChange}\n                        label=\"Start Date\"\n                    />\n                    <DatePicker\n                        id=\"to\"\n                        name=\"to\"\n                        startDate={endDate}\n                        max={today}\n                        changeHandler={handleDateChange}\n                        label=\"End Date\"\n                    />\n                </div>\n            ) : null}\n        </div>\n    );\n}\n\nexport default FilterDays;\n","import React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\n\nimport { updatePage } from \"../../../Redux/actions\";\nimport { useNavigate } from \"react-router\";\n\nimport ListStudentInfo from \"../../../components/ListStudentInfo\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faArrowLeft } from \"@fortawesome/free-solid-svg-icons\";\nimport FilterDays from \"../../../components/FilterDays\";\nimport \"react-date-range/dist/styles.css\"; // main style file\nimport \"react-date-range/dist/theme/default.css\"; // theme css file\n\nconst mapStateToProps = (state) => ({\n    currentPage: state.currentPage,\n    gradebook: state.gradebook,\n    class: state.class,\n    studentList: state.studentList,\n    dailyPoints: state.settings.dailyPoints,\n    studentInfo: state.studentInfo,\n});\n\nconst mapDispatchToProps = {\n    updatePage,\n};\n\nfunction StudentInfoPage(props) {\n    const [infoExists, setInfoExists] = useState(false);\n    const [startDateFilter, setStartDateFilter] = useState(\"\");\n    const [endDateFilter, setEndDateFilter] = useState(\"\");\n\n    //Remove punctuation in class & gradebook names to match db key\n    const uncleanCurrentGb = props.gradebook;\n    const uncleanCurrentClass = props.class;\n    const currentGb = uncleanCurrentGb.replace(\n        /[.,/#!$%^&*;:{}=\\-_`~()]/g,\n        \" \"\n    );\n    const currentClass = uncleanCurrentClass.replace(\n        /[.,/#!$%^&*;:{}=\\-_`~()]/g,\n        \" \"\n    ); //key/property used in db for studentLists and studentInfo\n    const classKey = currentGb + \"-\" + currentClass;\n\n    const { studentInfo } = props;\n\n    useEffect(() => {\n        props.updatePage(\"Student Info\");\n        if (studentInfo[classKey]) {\n            setInfoExists(true);\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    const navigate = useNavigate();\n\n    function handleDate(startDate, endDate) {\n        const formattedStartDate = startDate.split(\"-\").join(\"/\");\n        const formattedEndDate = endDate.split(\"-\").join(\"/\");\n        const startDateToFind = new Date(\n            formattedStartDate\n        ).toLocaleDateString();\n        const endDateToFind = new Date(formattedEndDate).toLocaleDateString();\n        setStartDateFilter(startDateToFind);\n        setEndDateFilter(endDateToFind);\n        console.log(startDateToFind + \" \" + endDateToFind);\n    }\n\n    function checkFilter(filter) {\n        if (!filter) {\n            setStartDateFilter(null);\n            setEndDateFilter(null);\n            console.log(\"filter\", filter);\n        }\n    }\n\n    return (\n        <React.Fragment>\n            <h1 className=\"header\">Student Info</h1>\n            <FontAwesomeIcon\n                name=\"left-arrow\"\n                icon={faArrowLeft}\n                color=\"green\"\n                className=\"back-arrow\"\n                onClick={() => navigate(-1)}\n            />\n            <hr />\n\n            <div className=\"d-flex justify-content-center\">\n                <span>\n                    <h2 className=\"subtitle mb-4\">\n                        {props.gradebook} - {props.class}\n                    </h2>\n                </span>\n            </div>\n            <div className=\"container\">\n                {!infoExists ? (\n                    <h3>No student information to display</h3>\n                ) : (\n                    <>\n                        <FilterDays\n                            handleDate={handleDate}\n                            checkFilter={checkFilter}\n                        />\n                        <ListStudentInfo\n                            startDate={startDateFilter}\n                            endDate={endDateFilter}\n                        />\n                    </>\n                )}\n            </div>\n        </React.Fragment>\n    );\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(StudentInfoPage);\n","import React, { Component } from \"react\";\nimport \"./NavMenu.scss\";\nimport { Collapse, Navbar, NavbarToggler, Nav, NavItem } from \"reactstrap\";\nimport { NavLink } from \"react-router-dom\";\nimport { updateLogin, updatePage } from \"../../Redux/actions\";\nimport { connect } from \"react-redux\";\n\n//Lings that will be mapped through to form NavLinks at top of page\nconst links = [\n    { to: \"/classes\", text: \"Classes\", key: \"link1\" },\n    { to: \"/gradebook\", text: \"Gradebook\", key: \"link2\" },\n    { to: \"/info\", text: \"Info\" },\n    { to: \"/settings\", text: \"Settings\", key: \"link3\" },\n    { to: \"/pe-clipboard-react\", text: \"Logout\", key: \"link4\" },\n];\n\nconst mapStateToProps = (state) => {\n    return {\n        signedIn: state.signedIn,\n        googleAuth: state.googleAuth,\n        currentPage: state.currentPage,\n        gradebook: state.gradebook,\n    };\n};\n\nconst mapDispatchToProps = {\n    updateLogin,\n    updatePage,\n};\nclass NavMenu extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            isOpen: false,\n            rosterNav: false,\n            classesLink: null,\n            render: false,\n        };\n\n        this.toggle = this.toggle.bind(this);\n        this.handleClick = this.handleClick.bind(this);\n        this.closeNavMenu = this.closeNavMenu.bind(this);\n    }\n\n    componentDidMount() {\n        if (!this.props.gradebook) {\n            if (links.length > 4) {\n                let classes = links.shift();\n                this.setState({ classesLink: classes });\n            }\n        } else {\n            if (links.length < 5 && this.state.classesLink) {\n                links.unshift(this.state.classesLink);\n                this.setState({ render: !this.state.render });\n            }\n        }\n    }\n\n    //addes an upload roster and grades tab to list of links above when a studentsPage is open\n    componentDidUpdate() {\n        if (this.props.navOpen === false) {\n            this.setState({ isOpen: true });\n        }\n\n        if (!this.props.gradebook) {\n            if (links.length > 4) {\n                let classes = links.shift();\n                this.setState({ classesLink: classes });\n            }\n        } else {\n            if (links.length < 5 && this.state.classesLink) {\n                links.unshift(this.state.classesLink);\n                this.setState({ render: !this.state.render });\n            }\n        }\n        if (this.props.currentPage === \"Students\") {\n            if (links.length === 5) {\n                links.push({\n                    to: \"/studentInfo\",\n                    text: \"Student Info\",\n                    key: \"link6\",\n                });\n                links.push({\n                    to: \"/uploadRoster\",\n                    text: \"Upload Roster\",\n                    key: \"link7\",\n                });\n                this.setState({ rosterNav: true });\n            }\n        } else if (this.props.currentPage !== \"Students\") {\n            if (links.length > 5) {\n                links.pop();\n                links.pop();\n                this.setState({ rosterNav: false });\n            }\n        }\n    }\n\n    toggle() {\n        this.setState({\n            isOpen: !this.state.isOpen,\n        });\n    }\n\n    logOut = () => {\n        (async () => {\n            await this.props.googleAuth.googleAuth.signOut();\n            this.props.updateLogin(false);\n            window.location.reload();\n        })();\n    };\n\n    handleClick(e) {\n        console.log(e.currentTarget.text);\n        if (e.currentTarget.text === \"Logout\") {\n            this.logOut();\n        }\n        this.props.updatePage(e.target.text);\n        this.setState({ isOpen: false });\n    }\n\n    closeNavMenu(e) {\n        console.log(e.target);\n        if (this.state.isOpen) {\n            this.setState({ isOpen: false });\n        }\n    }\n\n    //maps list of links to form nav menu\n    createNavItem = ({ to, text, className, key }) => (\n        <NavItem key={\"Nav-item\" + key}>\n            {/* //NavLink below is from react router not reactstrap */}\n            <NavLink\n                key={key}\n                to={to}\n                className={`${className} nav-text`}\n                onClick={this.handleClick}\n                text={text}\n            >\n                {text}\n            </NavLink>\n        </NavItem>\n    );\n\n    render() {\n        return (\n            <div>\n                <Navbar color=\"dark\" light expand=\"lg\" fixed=\"top\">\n                    <NavLink to=\"/info\" id=\"PE-clipboard\" className=\"nav-text\">\n                        Coach's Clipboard\n                    </NavLink>\n\n                    <NavbarToggler\n                        className=\"nav-text\"\n                        id=\"toggler\"\n                        onClick={this.toggle}\n                    />\n                    <Collapse isOpen={this.state.isOpen} navbar>\n                        <Nav className=\"nav-text ml-auto\" navbar>\n                            {links.map(this.createNavItem)}\n                        </Nav>\n                    </Collapse>\n                </Navbar>\n            </div>\n        );\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(NavMenu);\n","import SignInPage from \"./Pages/SignInPage/SignInPage\";\nimport \"./App.scss\";\nimport { Route, Routes } from \"react-router\";\nimport ClassesPage from \"./Pages/ClassesPage/ClassesPage\";\nimport GradebookPage from \"./Pages/GradebookPage/GradebookPage\";\nimport StudentsPage from \"./Pages/ClassesPage/StudentsPage/StudentsPage\";\nimport RosterPage from \"./Pages/ClassesPage/RosterPage/RosterPage\";\nimport { InfoPage } from \"./Pages/InfoPage/InfoPage\";\nimport SettingsPage from \"./Pages/SettingsPage/SettingsPage\";\nimport StudentInfoPage from \"./Pages/ClassesPage/StudentInfoPage/StudentInfoPage\";\nimport React from \"react\";\nimport NavMenu from \"./components/NavMenu/NavMenu\";\nimport { withRouter } from \"./components/withRouter\";\nimport { connect } from \"react-redux\";\nimport { updatePage } from \"./Redux/actions\";\nimport { writeUserData } from \"./Lib/LinkReduxToDb\";\n\nconst mapStateToProps = (state) => ({\n    signedIn: state.signedIn,\n    id: state.id,\n    email: state.email,\n    name: state.name,\n    userImg: state.userImg,\n    gradebook: state.gradebook,\n    gradebookList: state.gradebookList,\n    classList: state.classList,\n    class: state.class,\n    student: state.student,\n    studentList: state.studentList,\n    studentInfo: state.studentInfo,\n    settings: state.settings,\n});\n\nconst mapDispatchToProps = {\n    updatePage,\n};\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            navOpen: true,\n        };\n    }\n    componentDidMount() {\n        !this.props.gradebook && this.props.updatePage(\"Gradebook\");\n    }\n\n    componentDidUpdate(prevProps) {\n        // check on previous state\n        // only write when it's different with the new state\n        if (\n            (this.props.signedIn && prevProps.id !== this.props.id) ||\n            prevProps.gradebook !== this.props.gradebook ||\n            prevProps.gradebookList !== this.props.gradebookList ||\n            prevProps.classList !== this.props.classList ||\n            prevProps.studentList !== this.props.studentList ||\n            prevProps.studentInfo !== this.props.studentInfo ||\n            prevProps.settings !== this.props.settings\n        ) {\n            const userObject = {\n                id: this.props.id,\n                name: this.props.name,\n                email: this.props.email,\n                userImg: this.props.userImg,\n                gradebook: this.props.gradebook,\n                gradebookList: this.props.gradebookList,\n                classList: this.props.classList,\n                class: this.props.class,\n                student: this.props.student,\n                studentList: this.props.studentList,\n                studentInfo: this.props.studentInfo,\n                settings: this.props.settings,\n            };\n            // if there is a user write the above props to firebase\n            if (this.props.id) {\n                writeUserData(this.props.id, userObject);\n            }\n        }\n    }\n\n    closeNavbar() {\n        this.setState({\n            navOpen: false,\n        });\n    }\n\n    render() {\n        return (\n            //Check if user is signed in, if so, render navbar\n            <div className=\"App\">\n                {this.props.signedIn ? (\n                    <React.Fragment>\n                        <NavMenu navOpen={this.state.navOpen} />\n                        <main className=\"container\">\n                            <Routes>\n                                {/* If no gradebook is found, start on gradebook page otherwise\n                                start on class page. */}\n\n                                <Route // Starting page after login. Takes user to their classes unless there is no gradebook created or selected\n                                    path=\"/pe-clipboard-react\"\n                                    element={\n                                        !this.props.gradebook ? (\n                                            <GradebookPage />\n                                        ) : (\n                                            <ClassesPage />\n                                        )\n                                    }\n                                />\n                                <Route // This only appears if a gradebook has been chosen and allows users to create and access classes\n                                    path=\"/classes\"\n                                    element={<ClassesPage />}\n                                />\n                                <Route // This is where user can create or change gradebooks\n                                    path=\"/gradebook\"\n                                    element={<GradebookPage />}\n                                />\n                                <Route path=\"/info\" element={<InfoPage />} />\n\n                                <Route // Allows user to change notes and other settings.\n                                    path=\"/settings\"\n                                    element={<SettingsPage />}\n                                />\n                                <Route // Accessed by clicking on a class once a class is created.\n                                    path=\"/students\"\n                                    element={<StudentsPage />}\n                                />\n                                <Route // Only appears when a class is selected. Allows user to uploac roster from .csv\n                                    path=\"/uploadRoster\"\n                                    element={<RosterPage />}\n                                />\n                                <Route //Not to be confused with Gradebook page. This is to view student grades.\n                                    path=\"/studentInfo\"\n                                    element={<StudentInfoPage />}\n                                />\n                            </Routes>\n                        </main>\n                    </React.Fragment>\n                ) : (\n                    // First page to render if user is not signed in. Once signed in the page is not used\n                    <SignInPage />\n                )}\n            </div>\n        );\n    }\n}\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(App));\n","import { useNavigate } from \"react-router-dom\";\n\nexport const withRouter = (Component) => {\n    const Wrapper = (props) => {\n        const navigate = useNavigate();\n\n        return <Component navigate={navigate} {...props} />;\n    };\n\n    return Wrapper;\n};\n","import { db } from \"./FirebaseConfig\";\nimport { ref, onValue, update } from \"firebase/database\";\n\nexport function writeUserData(userId, userObject) {\n    if (ref(db, \"/users/\" + userId)) {\n        const userRef = ref(db, \"/users/\" + userId);\n        if (userObject) {\n            update(userRef, userObject);\n        }\n    }\n}\n\nexport function getUserData(userId) {\n    if (!userId) {\n        return console.log(\"No user Id\");\n    }\n    const userRef = ref(db, \"/users/\" + userId);\n    onValue(userRef, (snapshot) => {\n        const data = snapshot.val();\n\n        return data;\n    });\n}\n","import { createStore, applyMiddleware } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport { MainReducer } from \"./reducers\";\n\nconst initialState = {\n    signedIn: false,\n    id: \"\",\n    name: \"\",\n    email: \"\",\n    userImg: \"\",\n    googleAuth: {},\n    currentPage: \"Classes\",\n    gradebook: \"\",\n    gradebookList: [],\n    class: \"\",\n    classList: {},\n    student: \"\",\n    studentList: {},\n    settings: {\n        dailyPoints: 10,\n        absentPoints: -10,\n        tardyPoints: 0,\n        note1: \"ND\",\n        note1Points: 0,\n        note2: \"NP\",\n        note2Points: 0,\n        note3: \"E\",\n        note3Points: 0,\n    },\n    studentInfo: {},\n    totalPoints: {},\n    pointsPossible: {},\n    gradePercentage: {},\n};\n\nexport const store = createStore(\n    MainReducer,\n    initialState,\n    applyMiddleware(thunk)\n);\n","import * as ActionTypes from \"./actionTypes\";\n\nexport const MainReducer = (state, action) => {\n    //currentGb and currentClass are used for multiple cases\n    const uncleanCurrentGb = state.gradebook;\n    const currentGb = uncleanCurrentGb.replace(\n        /[.,/#!$%^&*;:{}=\\-_`~()]/g,\n        \" \"\n    );\n    const uncleanCurrentClass = state.class;\n    const currentClass = uncleanCurrentClass.replace(\n        /[.,/#!$%^&*;:{}=\\-_`~()]/g,\n        \" \"\n    );\n    switch (action.type) {\n        //USER INFO------------------------------------------------------------------------\n        case ActionTypes.UPDATE_LOGIN:\n            return { ...state, signedIn: action.payload };\n        case ActionTypes.UPDATE_USER_INFO:\n            return { ...state, ...action.payload };\n        case ActionTypes.UPDATE_GOOGLEAUTH:\n            return { ...state, googleAuth: action.payload };\n\n        //CURRENT PAGE----------------------------------------------------------------------\n        case ActionTypes.UPDATE_PAGE:\n            return { ...state, currentPage: action.payload.currentPage };\n\n        //UPDATE REDUX STORE FROM DATABASE--------------------------------------------------\n        case ActionTypes.UPDATE_STORE:\n            console.log(\"updating store: \", action.payload);\n            return { ...state, ...action.payload };\n\n        //UPDATE SETTINGS-------------------------------------------------------------------\n        case ActionTypes.UPDATE_SETTINGS:\n            return { ...state, settings: action.payload };\n\n        //GRADEBOOK-------------------------------------------------------------------------\n        case ActionTypes.CREATE_GRADEBOOK:\n            return { ...state, gradebook: action.payload };\n        case ActionTypes.UPDATE_GRADEBOOKLIST:\n            const gbMatch = action.payload;\n            if (!state.gradebookList.some((obj) => obj === gbMatch)) {\n                return {\n                    ...state,\n                    gradebookList: [...state.gradebookList, action.payload],\n                };\n            } else {\n                return { ...state };\n            }\n        case ActionTypes.DELETE_GRADEBOOK:\n            const updatedGradebooList = state.gradebookList.filter(\n                (gradebook) => gradebook !== action.payload\n            );\n            return { ...state, gradebookList: updatedGradebooList };\n\n        //CLASSES---------------------------------------------------------------------------\n        case ActionTypes.CREATE_CLASS:\n            return { ...state, class: action.payload };\n        case ActionTypes.UPDATE_CLASSES:\n            const cMatch = action.payload;\n            if (\n                state.classList[currentGb] &&\n                !state.classList[currentGb].some((obj) => obj === cMatch)\n            ) {\n                return {\n                    ...state,\n                    classList: {\n                        ...state.classList,\n                        [currentGb]: [\n                            ...state.classList[currentGb],\n                            action.payload,\n                        ].sort(),\n                    },\n                };\n            } else if (!state.classList.currentGb) {\n                console.log(\"duplicate or first time gradebook\");\n                return {\n                    ...state,\n                    classList: {\n                        ...state.classList,\n                        [currentGb]: [action.payload],\n                    },\n                };\n            }\n            return { ...state };\n        case ActionTypes.DELETE_CLASS:\n            const currentCl = state.classList[currentGb].filter(\n                (item) => item !== action.payload\n            );\n            // cleans class name to pair with gradebook to find the key in studenList to delete\n            const classToDelete = action.payload.replace(\n                /[.,/#!$%^&*;:{}=\\-_`~()]/g,\n                \" \"\n            );\n            const classKey = currentGb + \"-\" + classToDelete;\n            const filterObj = () => {\n                const keys = Object.keys(state.studentList);\n                return keys.filter((key) => key !== classKey);\n            };\n            const filteredArr = filterObj();\n            const filteredObj = {};\n            for (let key of filteredArr) {\n                filteredObj[key] = [state.studentList[key]];\n            }\n            return {\n                ...state,\n                classList: {\n                    ...state.classList,\n                    [currentGb]: currentCl,\n                },\n                studentList: { ...filteredObj },\n            };\n\n        //STUDENTS---------------------------------------------------------------------------\n        case ActionTypes.UPDATE_STUDENTLIST:\n            const sMatch = action.payload;\n            //If one student is being added, check if the name already exists. If so, don't add.\n            // console.log(state.studentList[currentGb + \"-\" + currentClass].some(student => student === ))\n            if (\n                sMatch.length === 1 &&\n                state.studentList[currentGb + \"-\" + currentClass] &&\n                state.studentList[currentGb + \"-\" + currentClass].some(\n                    (student) => student === sMatch[0]\n                )\n            ) {\n                return { ...state };\n            }\n\n            if (state.studentList[currentGb + \"-\" + currentClass]) {\n                return {\n                    ...state,\n                    studentList: {\n                        ...state.studentList,\n                        [currentGb + \"-\" + currentClass]: [\n                            ...state.studentList[\n                                currentGb + \"-\" + currentClass\n                            ],\n                            ...action.payload,\n                        ].sort(),\n                    },\n                };\n            }\n            if (!state.studentList[currentGb + \"-\" + currentClass]) {\n                return {\n                    ...state,\n                    studentList: {\n                        ...state.studentList,\n                        [currentGb + \"-\" + currentClass]: [\n                            ...action.payload,\n                        ].sort(),\n                    },\n                };\n            }\n            console.log(\"not able to add student\");\n            return { ...state };\n        case ActionTypes.DELETE_ROSTER:\n            if (state.studentList[currentGb + \"-\" + currentClass]) {\n                return {\n                    ...state,\n                    studentList: {\n                        ...state.studentList,\n                        [currentGb + \"-\" + currentClass]: [],\n                    },\n                };\n            }\n            return { ...state };\n        case ActionTypes.DELETE_STUDENT:\n            return {\n                ...state,\n                studentList: {\n                    ...state.studentList,\n                    [currentGb + \"-\" + currentClass]: state.studentList[\n                        currentGb + \"-\" + currentClass\n                    ].filter((student) => {\n                        return student !== action.payload;\n                    }),\n                },\n            };\n\n        //STUDENT INFO (GRADES,NOTES,ATTENDANCE)-------------------------------------------------------------------------------------\n        case ActionTypes.UPDATE_STUDENT_INFO:\n            const date = action.date;\n\n            if (state.studentInfo[currentGb + \"-\" + currentClass]) {\n                const thisClass =\n                    state.studentInfo[currentGb + \"-\" + currentClass];\n\n                //check if current date already has an entry. If so, write over it.\n\n                // If user submits studentInfo (grades, attendance, notes) the same day, replace previous submission\n                if (date === thisClass.dateLastSubmitted) {\n                    // Each key is the name of a student\n                    Object.keys(action.payload).forEach((key) => {\n                        // If the student exists...\n                        if (thisClass[key]) {\n                            thisClass[key] = [\n                                // The slice is removing last submission and adding updated submission\n                                ...thisClass[key].slice(0, -1),\n                                ...action.payload[key],\n                            ];\n                        } else {\n                            thisClass[key] = [...action.payload[key]];\n                        }\n                    });\n                    return {\n                        ...state,\n                        studentInfo: {\n                            ...state.studentInfo,\n                            [currentGb + \"-\" + currentClass]: {\n                                ...thisClass,\n                                dateLastSubmitted: date,\n                                totalPoints:\n                                    state.studentInfo[\n                                        currentGb + \"-\" + currentClass\n                                    ].totalPoints,\n                            },\n                        },\n                    };\n                    // If it's a new day, creat a new submission\n                } else {\n                    Object.keys(action.payload).forEach((key) => {\n                        if (thisClass[key]) {\n                            thisClass[key] = [\n                                ...thisClass[key],\n                                ...action.payload[key],\n                            ];\n                        } else {\n                            thisClass[key] = [...action.payload[key]];\n                        }\n                    });\n                    return {\n                        ...state,\n                        studentInfo: {\n                            ...state.studentInfo,\n                            [currentGb + \"-\" + currentClass]: {\n                                ...thisClass,\n                                dateLastSubmitted: date,\n                                totalPoints:\n                                    state.studentInfo[\n                                        currentGb + \"-\" + currentClass\n                                    ].totalPoints + state.settings.dailyPoints,\n                            },\n                        },\n                    };\n                }\n            }\n            // If this is the first submission for a class...\n            return {\n                ...state,\n                studentInfo: {\n                    ...state.studentInfo,\n                    [currentGb + \"-\" + currentClass]: {\n                        ...action.payload,\n                        dateLastSubmitted: date,\n                        totalPoints: state.settings.dailyPoints,\n                    },\n                },\n            };\n\n        //DEFAULT-----------------------------------------------------------------------------\n        default:\n            console.log(\"default reducer\");\n            return state;\n    }\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"./index.scss\";\nimport App from \"./App\";\n\nimport { BrowserRouter } from \"react-router-dom\";\nimport { Provider } from \"react-redux\";\nimport { store } from \"./Redux/createStore\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <BrowserRouter>\n                <App />\n            </BrowserRouter>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n//google drive connection\n"],"sourceRoot":""}